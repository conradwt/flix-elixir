/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../deps/phoenix/priv/static/phoenix.esm.js":
/*!**************************************************!*\
  !*** ../deps/phoenix/priv/static/phoenix.esm.js ***!
  \**************************************************/
/*! exports provided: Channel, LongPoll, Presence, Serializer, Socket */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Channel\", function() { return Channel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LongPoll\", function() { return LongPoll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Presence\", function() { return Presence; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Serializer\", function() { return serializer_default; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Socket\", function() { return Socket; });\n// js/phoenix/utils.js\nvar closure = value => {\n  if (typeof value === \"function\") {\n    return value;\n  } else {\n    let closure2 = function () {\n      return value;\n    };\n\n    return closure2;\n  }\n}; // js/phoenix/constants.js\n\n\nvar globalSelf = typeof self !== \"undefined\" ? self : null;\nvar phxWindow = typeof window !== \"undefined\" ? window : null;\nvar global = globalSelf || phxWindow || void 0;\nvar DEFAULT_VSN = \"2.0.0\";\nvar SOCKET_STATES = {\n  connecting: 0,\n  open: 1,\n  closing: 2,\n  closed: 3\n};\nvar DEFAULT_TIMEOUT = 1e4;\nvar WS_CLOSE_NORMAL = 1e3;\nvar CHANNEL_STATES = {\n  closed: \"closed\",\n  errored: \"errored\",\n  joined: \"joined\",\n  joining: \"joining\",\n  leaving: \"leaving\"\n};\nvar CHANNEL_EVENTS = {\n  close: \"phx_close\",\n  error: \"phx_error\",\n  join: \"phx_join\",\n  reply: \"phx_reply\",\n  leave: \"phx_leave\"\n};\nvar TRANSPORTS = {\n  longpoll: \"longpoll\",\n  websocket: \"websocket\"\n};\nvar XHR_STATES = {\n  complete: 4\n}; // js/phoenix/push.js\n\nvar Push = class {\n  constructor(channel, event, payload, timeout) {\n    this.channel = channel;\n    this.event = event;\n\n    this.payload = payload || function () {\n      return {};\n    };\n\n    this.receivedResp = null;\n    this.timeout = timeout;\n    this.timeoutTimer = null;\n    this.recHooks = [];\n    this.sent = false;\n  }\n\n  resend(timeout) {\n    this.timeout = timeout;\n    this.reset();\n    this.send();\n  }\n\n  send() {\n    if (this.hasReceived(\"timeout\")) {\n      return;\n    }\n\n    this.startTimeout();\n    this.sent = true;\n    this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload(),\n      ref: this.ref,\n      join_ref: this.channel.joinRef()\n    });\n  }\n\n  receive(status, callback) {\n    if (this.hasReceived(status)) {\n      callback(this.receivedResp.response);\n    }\n\n    this.recHooks.push({\n      status,\n      callback\n    });\n    return this;\n  }\n\n  reset() {\n    this.cancelRefEvent();\n    this.ref = null;\n    this.refEvent = null;\n    this.receivedResp = null;\n    this.sent = false;\n  }\n\n  matchReceive({\n    status,\n    response,\n    _ref\n  }) {\n    this.recHooks.filter(h => h.status === status).forEach(h => h.callback(response));\n  }\n\n  cancelRefEvent() {\n    if (!this.refEvent) {\n      return;\n    }\n\n    this.channel.off(this.refEvent);\n  }\n\n  cancelTimeout() {\n    clearTimeout(this.timeoutTimer);\n    this.timeoutTimer = null;\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      this.cancelTimeout();\n    }\n\n    this.ref = this.channel.socket.makeRef();\n    this.refEvent = this.channel.replyEventName(this.ref);\n    this.channel.on(this.refEvent, payload => {\n      this.cancelRefEvent();\n      this.cancelTimeout();\n      this.receivedResp = payload;\n      this.matchReceive(payload);\n    });\n    this.timeoutTimer = setTimeout(() => {\n      this.trigger(\"timeout\", {});\n    }, this.timeout);\n  }\n\n  hasReceived(status) {\n    return this.receivedResp && this.receivedResp.status === status;\n  }\n\n  trigger(status, response) {\n    this.channel.trigger(this.refEvent, {\n      status,\n      response\n    });\n  }\n\n}; // js/phoenix/timer.js\n\nvar Timer = class {\n  constructor(callback, timerCalc) {\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = null;\n    this.tries = 0;\n  }\n\n  reset() {\n    this.tries = 0;\n    clearTimeout(this.timer);\n  }\n\n  scheduleTimeout() {\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      this.tries = this.tries + 1;\n      this.callback();\n    }, this.timerCalc(this.tries + 1));\n  }\n\n}; // js/phoenix/channel.js\n\nvar Channel = class {\n  constructor(topic, params, socket) {\n    this.state = CHANNEL_STATES.closed;\n    this.topic = topic;\n    this.params = closure(params || {});\n    this.socket = socket;\n    this.bindings = [];\n    this.bindingRef = 0;\n    this.timeout = this.socket.timeout;\n    this.joinedOnce = false;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.pushBuffer = [];\n    this.stateChangeRefs = [];\n    this.rejoinTimer = new Timer(() => {\n      if (this.socket.isConnected()) {\n        this.rejoin();\n      }\n    }, this.socket.rejoinAfterMs);\n    this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));\n    this.stateChangeRefs.push(this.socket.onOpen(() => {\n      this.rejoinTimer.reset();\n\n      if (this.isErrored()) {\n        this.rejoin();\n      }\n    }));\n    this.joinPush.receive(\"ok\", () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this.joinPush.receive(\"error\", () => {\n      this.state = CHANNEL_STATES.errored;\n\n      if (this.socket.isConnected()) {\n        this.rejoinTimer.scheduleTimeout();\n      }\n    });\n    this.onClose(() => {\n      this.rejoinTimer.reset();\n      if (this.socket.hasLogger()) this.socket.log(\"channel\", `close ${this.topic} ${this.joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket.remove(this);\n    });\n    this.onError(reason => {\n      if (this.socket.hasLogger()) this.socket.log(\"channel\", `error ${this.topic}`, reason);\n\n      if (this.isJoining()) {\n        this.joinPush.reset();\n      }\n\n      this.state = CHANNEL_STATES.errored;\n\n      if (this.socket.isConnected()) {\n        this.rejoinTimer.scheduleTimeout();\n      }\n    });\n    this.joinPush.receive(\"timeout\", () => {\n      if (this.socket.hasLogger()) this.socket.log(\"channel\", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);\n      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);\n      leavePush.send();\n      this.state = CHANNEL_STATES.errored;\n      this.joinPush.reset();\n\n      if (this.socket.isConnected()) {\n        this.rejoinTimer.scheduleTimeout();\n      }\n    });\n    this.on(CHANNEL_EVENTS.reply, (payload, ref) => {\n      this.trigger(this.replyEventName(ref), payload);\n    });\n  }\n\n  join(timeout = this.timeout) {\n    if (this.joinedOnce) {\n      throw new Error(\"tried to join multiple times. 'join' can only be called a single time per channel instance\");\n    } else {\n      this.timeout = timeout;\n      this.joinedOnce = true;\n      this.rejoin();\n      return this.joinPush;\n    }\n  }\n\n  onClose(callback) {\n    this.on(CHANNEL_EVENTS.close, callback);\n  }\n\n  onError(callback) {\n    return this.on(CHANNEL_EVENTS.error, reason => callback(reason));\n  }\n\n  on(event, callback) {\n    let ref = this.bindingRef++;\n    this.bindings.push({\n      event,\n      ref,\n      callback\n    });\n    return ref;\n  }\n\n  off(event, ref) {\n    this.bindings = this.bindings.filter(bind => {\n      return !(bind.event === event && (typeof ref === \"undefined\" || ref === bind.ref));\n    });\n  }\n\n  canPush() {\n    return this.socket.isConnected() && this.isJoined();\n  }\n\n  push(event, payload, timeout = this.timeout) {\n    payload = payload || {};\n\n    if (!this.joinedOnce) {\n      throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);\n    }\n\n    let pushEvent = new Push(this, event, function () {\n      return payload;\n    }, timeout);\n\n    if (this.canPush()) {\n      pushEvent.send();\n    } else {\n      pushEvent.startTimeout();\n      this.pushBuffer.push(pushEvent);\n    }\n\n    return pushEvent;\n  }\n\n  leave(timeout = this.timeout) {\n    this.rejoinTimer.reset();\n    this.joinPush.cancelTimeout();\n    this.state = CHANNEL_STATES.leaving;\n\n    let onClose = () => {\n      if (this.socket.hasLogger()) this.socket.log(\"channel\", `leave ${this.topic}`);\n      this.trigger(CHANNEL_EVENTS.close, \"leave\");\n    };\n\n    let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);\n    leavePush.receive(\"ok\", () => onClose()).receive(\"timeout\", () => onClose());\n    leavePush.send();\n\n    if (!this.canPush()) {\n      leavePush.trigger(\"ok\", {});\n    }\n\n    return leavePush;\n  }\n\n  onMessage(_event, payload, _ref) {\n    return payload;\n  }\n\n  isMember(topic, event, payload, joinRef) {\n    if (this.topic !== topic) {\n      return false;\n    }\n\n    if (joinRef && joinRef !== this.joinRef()) {\n      if (this.socket.hasLogger()) this.socket.log(\"channel\", \"dropping outdated message\", {\n        topic,\n        event,\n        payload,\n        joinRef\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  joinRef() {\n    return this.joinPush.ref;\n  }\n\n  rejoin(timeout = this.timeout) {\n    if (this.isLeaving()) {\n      return;\n    }\n\n    this.socket.leaveOpenTopic(this.topic);\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n\n  trigger(event, payload, ref, joinRef) {\n    let handledPayload = this.onMessage(event, payload, ref, joinRef);\n\n    if (payload && !handledPayload) {\n      throw new Error(\"channel onMessage callbacks must return the payload, modified or unmodified\");\n    }\n\n    let eventBindings = this.bindings.filter(bind => bind.event === event);\n\n    for (let i = 0; i < eventBindings.length; i++) {\n      let bind = eventBindings[i];\n      bind.callback(handledPayload, ref, joinRef || this.joinRef());\n    }\n  }\n\n  replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n\n  isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n\n  isErrored() {\n    return this.state === CHANNEL_STATES.errored;\n  }\n\n  isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n\n  isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n\n  isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n\n}; // js/phoenix/ajax.js\n\nvar Ajax = class {\n  static request(method, endPoint, accept, body, timeout, ontimeout, callback) {\n    if (global.XDomainRequest) {\n      let req = new global.XDomainRequest();\n      this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);\n    } else {\n      let req = new global.XMLHttpRequest();\n      this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);\n    }\n  }\n\n  static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {\n    req.timeout = timeout;\n    req.open(method, endPoint);\n\n    req.onload = () => {\n      let response = this.parseJSON(req.responseText);\n      callback && callback(response);\n    };\n\n    if (ontimeout) {\n      req.ontimeout = ontimeout;\n    }\n\n    req.onprogress = () => {};\n\n    req.send(body);\n  }\n\n  static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {\n    req.open(method, endPoint, true);\n    req.timeout = timeout;\n    req.setRequestHeader(\"Content-Type\", accept);\n\n    req.onerror = () => {\n      callback && callback(null);\n    };\n\n    req.onreadystatechange = () => {\n      if (req.readyState === XHR_STATES.complete && callback) {\n        let response = this.parseJSON(req.responseText);\n        callback(response);\n      }\n    };\n\n    if (ontimeout) {\n      req.ontimeout = ontimeout;\n    }\n\n    req.send(body);\n  }\n\n  static parseJSON(resp) {\n    if (!resp || resp === \"\") {\n      return null;\n    }\n\n    try {\n      return JSON.parse(resp);\n    } catch (e) {\n      console && console.log(\"failed to parse JSON response\", resp);\n      return null;\n    }\n  }\n\n  static serialize(obj, parentKey) {\n    let queryStr = [];\n\n    for (var key in obj) {\n      if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n        continue;\n      }\n\n      let paramKey = parentKey ? `${parentKey}[${key}]` : key;\n      let paramVal = obj[key];\n\n      if (typeof paramVal === \"object\") {\n        queryStr.push(this.serialize(paramVal, paramKey));\n      } else {\n        queryStr.push(encodeURIComponent(paramKey) + \"=\" + encodeURIComponent(paramVal));\n      }\n    }\n\n    return queryStr.join(\"&\");\n  }\n\n  static appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n\n    let prefix = url.match(/\\?/) ? \"&\" : \"?\";\n    return `${url}${prefix}${this.serialize(params)}`;\n  }\n\n}; // js/phoenix/longpoll.js\n\nvar LongPoll = class {\n  constructor(endPoint) {\n    this.endPoint = null;\n    this.token = null;\n    this.skipHeartbeat = true;\n\n    this.onopen = function () {};\n\n    this.onerror = function () {};\n\n    this.onmessage = function () {};\n\n    this.onclose = function () {};\n\n    this.pollEndpoint = this.normalizeEndpoint(endPoint);\n    this.readyState = SOCKET_STATES.connecting;\n    this.poll();\n  }\n\n  normalizeEndpoint(endPoint) {\n    return endPoint.replace(\"ws://\", \"http://\").replace(\"wss://\", \"https://\").replace(new RegExp(\"(.*)/\" + TRANSPORTS.websocket), \"$1/\" + TRANSPORTS.longpoll);\n  }\n\n  endpointURL() {\n    return Ajax.appendParams(this.pollEndpoint, {\n      token: this.token\n    });\n  }\n\n  closeAndRetry() {\n    this.close();\n    this.readyState = SOCKET_STATES.connecting;\n  }\n\n  ontimeout() {\n    this.onerror(\"timeout\");\n    this.closeAndRetry();\n  }\n\n  poll() {\n    if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {\n      return;\n    }\n\n    Ajax.request(\"GET\", this.endpointURL(), \"application/json\", null, this.timeout, this.ontimeout.bind(this), resp => {\n      if (resp) {\n        var {\n          status,\n          token,\n          messages\n        } = resp;\n        this.token = token;\n      } else {\n        status = 0;\n      }\n\n      switch (status) {\n        case 200:\n          messages.forEach(msg => {\n            setTimeout(() => {\n              this.onmessage({\n                data: msg\n              });\n            }, 0);\n          });\n          this.poll();\n          break;\n\n        case 204:\n          this.poll();\n          break;\n\n        case 410:\n          this.readyState = SOCKET_STATES.open;\n          this.onopen();\n          this.poll();\n          break;\n\n        case 403:\n          this.onerror();\n          this.close();\n          break;\n\n        case 0:\n        case 500:\n          this.onerror();\n          this.closeAndRetry();\n          break;\n\n        default:\n          throw new Error(`unhandled poll status ${status}`);\n      }\n    });\n  }\n\n  send(body) {\n    Ajax.request(\"POST\", this.endpointURL(), \"application/json\", body, this.timeout, this.onerror.bind(this, \"timeout\"), resp => {\n      if (!resp || resp.status !== 200) {\n        this.onerror(resp && resp.status);\n        this.closeAndRetry();\n      }\n    });\n  }\n\n  close(_code, _reason) {\n    this.readyState = SOCKET_STATES.closed;\n    this.onclose();\n  }\n\n}; // js/phoenix/presence.js\n\nvar Presence = class {\n  constructor(channel, opts = {}) {\n    let events = opts.events || {\n      state: \"presence_state\",\n      diff: \"presence_diff\"\n    };\n    this.state = {};\n    this.pendingDiffs = [];\n    this.channel = channel;\n    this.joinRef = null;\n    this.caller = {\n      onJoin: function () {},\n      onLeave: function () {},\n      onSync: function () {}\n    };\n    this.channel.on(events.state, newState => {\n      let {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      this.joinRef = this.channel.joinRef();\n      this.state = Presence.syncState(this.state, newState, onJoin, onLeave);\n      this.pendingDiffs.forEach(diff => {\n        this.state = Presence.syncDiff(this.state, diff, onJoin, onLeave);\n      });\n      this.pendingDiffs = [];\n      onSync();\n    });\n    this.channel.on(events.diff, diff => {\n      let {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff);\n      } else {\n        this.state = Presence.syncDiff(this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n  }\n\n  onJoin(callback) {\n    this.caller.onJoin = callback;\n  }\n\n  onLeave(callback) {\n    this.caller.onLeave = callback;\n  }\n\n  onSync(callback) {\n    this.caller.onSync = callback;\n  }\n\n  list(by) {\n    return Presence.list(this.state, by);\n  }\n\n  inPendingSyncState() {\n    return !this.joinRef || this.joinRef !== this.channel.joinRef();\n  }\n\n  static syncState(currentState, newState, onJoin, onLeave) {\n    let state = this.clone(currentState);\n    let joins = {};\n    let leaves = {};\n    this.map(state, (key, presence) => {\n      if (!newState[key]) {\n        leaves[key] = presence;\n      }\n    });\n    this.map(newState, (key, newPresence) => {\n      let currentPresence = state[key];\n\n      if (currentPresence) {\n        let newRefs = newPresence.metas.map(m => m.phx_ref);\n        let curRefs = currentPresence.metas.map(m => m.phx_ref);\n        let joinedMetas = newPresence.metas.filter(m => curRefs.indexOf(m.phx_ref) < 0);\n        let leftMetas = currentPresence.metas.filter(m => newRefs.indexOf(m.phx_ref) < 0);\n\n        if (joinedMetas.length > 0) {\n          joins[key] = newPresence;\n          joins[key].metas = joinedMetas;\n        }\n\n        if (leftMetas.length > 0) {\n          leaves[key] = this.clone(currentPresence);\n          leaves[key].metas = leftMetas;\n        }\n      } else {\n        joins[key] = newPresence;\n      }\n    });\n    return this.syncDiff(state, {\n      joins,\n      leaves\n    }, onJoin, onLeave);\n  }\n\n  static syncDiff(state, diff, onJoin, onLeave) {\n    let {\n      joins,\n      leaves\n    } = this.clone(diff);\n\n    if (!onJoin) {\n      onJoin = function () {};\n    }\n\n    if (!onLeave) {\n      onLeave = function () {};\n    }\n\n    this.map(joins, (key, newPresence) => {\n      let currentPresence = state[key];\n      state[key] = this.clone(newPresence);\n\n      if (currentPresence) {\n        let joinedRefs = state[key].metas.map(m => m.phx_ref);\n        let curMetas = currentPresence.metas.filter(m => joinedRefs.indexOf(m.phx_ref) < 0);\n        state[key].metas.unshift(...curMetas);\n      }\n\n      onJoin(key, currentPresence, newPresence);\n    });\n    this.map(leaves, (key, leftPresence) => {\n      let currentPresence = state[key];\n\n      if (!currentPresence) {\n        return;\n      }\n\n      let refsToRemove = leftPresence.metas.map(m => m.phx_ref);\n      currentPresence.metas = currentPresence.metas.filter(p => {\n        return refsToRemove.indexOf(p.phx_ref) < 0;\n      });\n      onLeave(key, currentPresence, leftPresence);\n\n      if (currentPresence.metas.length === 0) {\n        delete state[key];\n      }\n    });\n    return state;\n  }\n\n  static list(presences, chooser) {\n    if (!chooser) {\n      chooser = function (key, pres) {\n        return pres;\n      };\n    }\n\n    return this.map(presences, (key, presence) => {\n      return chooser(key, presence);\n    });\n  }\n\n  static map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(key => func(key, obj[key]));\n  }\n\n  static clone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n}; // js/phoenix/serializer.js\n\nvar serializer_default = {\n  HEADER_LENGTH: 1,\n  META_LENGTH: 4,\n  KINDS: {\n    push: 0,\n    reply: 1,\n    broadcast: 2\n  },\n\n  encode(msg, callback) {\n    if (msg.payload.constructor === ArrayBuffer) {\n      return callback(this.binaryEncode(msg));\n    } else {\n      let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];\n      return callback(JSON.stringify(payload));\n    }\n  },\n\n  decode(rawPayload, callback) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this.binaryDecode(rawPayload));\n    } else {\n      let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);\n      return callback({\n        join_ref,\n        ref,\n        topic,\n        event,\n        payload\n      });\n    }\n  },\n\n  binaryEncode(message) {\n    let {\n      join_ref,\n      ref,\n      event,\n      topic,\n      payload\n    } = message;\n    let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;\n    let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);\n    let view = new DataView(header);\n    let offset = 0;\n    view.setUint8(offset++, this.KINDS.push);\n    view.setUint8(offset++, join_ref.length);\n    view.setUint8(offset++, ref.length);\n    view.setUint8(offset++, topic.length);\n    view.setUint8(offset++, event.length);\n    Array.from(join_ref, char => view.setUint8(offset++, char.charCodeAt(0)));\n    Array.from(ref, char => view.setUint8(offset++, char.charCodeAt(0)));\n    Array.from(topic, char => view.setUint8(offset++, char.charCodeAt(0)));\n    Array.from(event, char => view.setUint8(offset++, char.charCodeAt(0)));\n    var combined = new Uint8Array(header.byteLength + payload.byteLength);\n    combined.set(new Uint8Array(header), 0);\n    combined.set(new Uint8Array(payload), header.byteLength);\n    return combined.buffer;\n  },\n\n  binaryDecode(buffer) {\n    let view = new DataView(buffer);\n    let kind = view.getUint8(0);\n    let decoder = new TextDecoder();\n\n    switch (kind) {\n      case this.KINDS.push:\n        return this.decodePush(buffer, view, decoder);\n\n      case this.KINDS.reply:\n        return this.decodeReply(buffer, view, decoder);\n\n      case this.KINDS.broadcast:\n        return this.decodeBroadcast(buffer, view, decoder);\n    }\n  },\n\n  decodePush(buffer, view, decoder) {\n    let joinRefSize = view.getUint8(1);\n    let topicSize = view.getUint8(2);\n    let eventSize = view.getUint8(3);\n    let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;\n    let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));\n    offset = offset + joinRefSize;\n    let topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n    offset = offset + topicSize;\n    let event = decoder.decode(buffer.slice(offset, offset + eventSize));\n    offset = offset + eventSize;\n    let data = buffer.slice(offset, buffer.byteLength);\n    return {\n      join_ref: joinRef,\n      ref: null,\n      topic,\n      event,\n      payload: data\n    };\n  },\n\n  decodeReply(buffer, view, decoder) {\n    let joinRefSize = view.getUint8(1);\n    let refSize = view.getUint8(2);\n    let topicSize = view.getUint8(3);\n    let eventSize = view.getUint8(4);\n    let offset = this.HEADER_LENGTH + this.META_LENGTH;\n    let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));\n    offset = offset + joinRefSize;\n    let ref = decoder.decode(buffer.slice(offset, offset + refSize));\n    offset = offset + refSize;\n    let topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n    offset = offset + topicSize;\n    let event = decoder.decode(buffer.slice(offset, offset + eventSize));\n    offset = offset + eventSize;\n    let data = buffer.slice(offset, buffer.byteLength);\n    let payload = {\n      status: event,\n      response: data\n    };\n    return {\n      join_ref: joinRef,\n      ref,\n      topic,\n      event: CHANNEL_EVENTS.reply,\n      payload\n    };\n  },\n\n  decodeBroadcast(buffer, view, decoder) {\n    let topicSize = view.getUint8(1);\n    let eventSize = view.getUint8(2);\n    let offset = this.HEADER_LENGTH + 2;\n    let topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n    offset = offset + topicSize;\n    let event = decoder.decode(buffer.slice(offset, offset + eventSize));\n    offset = offset + eventSize;\n    let data = buffer.slice(offset, buffer.byteLength);\n    return {\n      join_ref: null,\n      ref: null,\n      topic,\n      event,\n      payload: data\n    };\n  }\n\n}; // js/phoenix/socket.js\n\nvar Socket = class {\n  constructor(endPoint, opts = {}) {\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.channels = [];\n    this.sendBuffer = [];\n    this.ref = 0;\n    this.timeout = opts.timeout || DEFAULT_TIMEOUT;\n    this.transport = opts.transport || global.WebSocket || LongPoll;\n    this.establishedConnections = 0;\n    this.defaultEncoder = serializer_default.encode.bind(serializer_default);\n    this.defaultDecoder = serializer_default.decode.bind(serializer_default);\n    this.closeWasClean = false;\n    this.binaryType = opts.binaryType || \"arraybuffer\";\n    this.connectClock = 1;\n\n    if (this.transport !== LongPoll) {\n      this.encode = opts.encode || this.defaultEncoder;\n      this.decode = opts.decode || this.defaultDecoder;\n    } else {\n      this.encode = this.defaultEncoder;\n      this.decode = this.defaultDecoder;\n    }\n\n    let awaitingConnectionOnPageShow = null;\n\n    if (phxWindow && phxWindow.addEventListener) {\n      phxWindow.addEventListener(\"pagehide\", _e => {\n        if (this.conn) {\n          this.disconnect();\n          awaitingConnectionOnPageShow = this.connectClock;\n        }\n      });\n      phxWindow.addEventListener(\"pageshow\", _e => {\n        if (awaitingConnectionOnPageShow === this.connectClock) {\n          awaitingConnectionOnPageShow = null;\n          this.connect();\n        }\n      });\n    }\n\n    this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;\n\n    this.rejoinAfterMs = tries => {\n      if (opts.rejoinAfterMs) {\n        return opts.rejoinAfterMs(tries);\n      } else {\n        return [1e3, 2e3, 5e3][tries - 1] || 1e4;\n      }\n    };\n\n    this.reconnectAfterMs = tries => {\n      if (opts.reconnectAfterMs) {\n        return opts.reconnectAfterMs(tries);\n      } else {\n        return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;\n      }\n    };\n\n    this.logger = opts.logger || null;\n    this.longpollerTimeout = opts.longpollerTimeout || 2e4;\n    this.params = closure(opts.params || {});\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    this.vsn = opts.vsn || DEFAULT_VSN;\n    this.heartbeatTimer = null;\n    this.pendingHeartbeatRef = null;\n    this.reconnectTimer = new Timer(() => {\n      this.teardown(() => this.connect());\n    }, this.reconnectAfterMs);\n  }\n\n  replaceTransport(newTransport) {\n    this.disconnect();\n    this.transport = newTransport;\n  }\n\n  protocol() {\n    return location.protocol.match(/^https/) ? \"wss\" : \"ws\";\n  }\n\n  endPointURL() {\n    let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), {\n      vsn: this.vsn\n    });\n\n    if (uri.charAt(0) !== \"/\") {\n      return uri;\n    }\n\n    if (uri.charAt(1) === \"/\") {\n      return `${this.protocol()}:${uri}`;\n    }\n\n    return `${this.protocol()}://${location.host}${uri}`;\n  }\n\n  disconnect(callback, code, reason) {\n    this.connectClock++;\n    this.closeWasClean = true;\n    this.reconnectTimer.reset();\n    this.teardown(callback, code, reason);\n  }\n\n  connect(params) {\n    this.connectClock++;\n\n    if (params) {\n      console && console.log(\"passing params to connect is deprecated. Instead pass :params to the Socket constructor\");\n      this.params = closure(params);\n    }\n\n    if (this.conn) {\n      return;\n    }\n\n    this.closeWasClean = false;\n    this.conn = new this.transport(this.endPointURL());\n    this.conn.binaryType = this.binaryType;\n    this.conn.timeout = this.longpollerTimeout;\n\n    this.conn.onopen = () => this.onConnOpen();\n\n    this.conn.onerror = error => this.onConnError(error);\n\n    this.conn.onmessage = event => this.onConnMessage(event);\n\n    this.conn.onclose = event => this.onConnClose(event);\n  }\n\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n\n  hasLogger() {\n    return this.logger !== null;\n  }\n\n  onOpen(callback) {\n    let ref = this.makeRef();\n    this.stateChangeCallbacks.open.push([ref, callback]);\n    return ref;\n  }\n\n  onClose(callback) {\n    let ref = this.makeRef();\n    this.stateChangeCallbacks.close.push([ref, callback]);\n    return ref;\n  }\n\n  onError(callback) {\n    let ref = this.makeRef();\n    this.stateChangeCallbacks.error.push([ref, callback]);\n    return ref;\n  }\n\n  onMessage(callback) {\n    let ref = this.makeRef();\n    this.stateChangeCallbacks.message.push([ref, callback]);\n    return ref;\n  }\n\n  onConnOpen() {\n    if (this.hasLogger()) this.log(\"transport\", `connected to ${this.endPointURL()}`);\n    this.closeWasClean = false;\n    this.establishedConnections++;\n    this.flushSendBuffer();\n    this.reconnectTimer.reset();\n    this.resetHeartbeat();\n    this.stateChangeCallbacks.open.forEach(([, callback]) => callback());\n  }\n\n  heartbeatTimeout() {\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n\n      if (this.hasLogger()) {\n        this.log(\"transport\", \"heartbeat timeout. Attempting to re-establish connection\");\n      }\n\n      this.abnormalClose(\"heartbeat timeout\");\n    }\n  }\n\n  resetHeartbeat() {\n    if (this.conn && this.conn.skipHeartbeat) {\n      return;\n    }\n\n    this.pendingHeartbeatRef = null;\n    clearTimeout(this.heartbeatTimer);\n    setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n  }\n\n  teardown(callback, code, reason) {\n    if (!this.conn) {\n      return callback && callback();\n    }\n\n    this.waitForBufferDone(() => {\n      if (this.conn) {\n        if (code) {\n          this.conn.close(code, reason || \"\");\n        } else {\n          this.conn.close();\n        }\n      }\n\n      this.waitForSocketClosed(() => {\n        if (this.conn) {\n          this.conn.onclose = function () {};\n\n          this.conn = null;\n        }\n\n        callback && callback();\n      });\n    });\n  }\n\n  waitForBufferDone(callback, tries = 1) {\n    if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {\n      callback();\n      return;\n    }\n\n    setTimeout(() => {\n      this.waitForBufferDone(callback, tries + 1);\n    }, 150 * tries);\n  }\n\n  waitForSocketClosed(callback, tries = 1) {\n    if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {\n      callback();\n      return;\n    }\n\n    setTimeout(() => {\n      this.waitForSocketClosed(callback, tries + 1);\n    }, 150 * tries);\n  }\n\n  onConnClose(event) {\n    let closeCode = event && event.code;\n    if (this.hasLogger()) this.log(\"transport\", \"close\", event);\n    this.triggerChanError();\n    clearTimeout(this.heartbeatTimer);\n\n    if (!this.closeWasClean && closeCode !== 1e3) {\n      this.reconnectTimer.scheduleTimeout();\n    }\n\n    this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));\n  }\n\n  onConnError(error) {\n    if (this.hasLogger()) this.log(\"transport\", error);\n    let transportBefore = this.transport;\n    let establishedBefore = this.establishedConnections;\n    this.stateChangeCallbacks.error.forEach(([, callback]) => {\n      callback(error, transportBefore, establishedBefore);\n    });\n\n    if (transportBefore === this.transport || establishedBefore > 0) {\n      this.triggerChanError();\n    }\n  }\n\n  triggerChanError() {\n    this.channels.forEach(channel => {\n      if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {\n        channel.trigger(CHANNEL_EVENTS.error);\n      }\n    });\n  }\n\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return \"connecting\";\n\n      case SOCKET_STATES.open:\n        return \"open\";\n\n      case SOCKET_STATES.closing:\n        return \"closing\";\n\n      default:\n        return \"closed\";\n    }\n  }\n\n  isConnected() {\n    return this.connectionState() === \"open\";\n  }\n\n  remove(channel) {\n    this.off(channel.stateChangeRefs);\n    this.channels = this.channels.filter(c => c.joinRef() !== channel.joinRef());\n  }\n\n  off(refs) {\n    for (let key in this.stateChangeCallbacks) {\n      this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {\n        return refs.indexOf(ref) === -1;\n      });\n    }\n  }\n\n  channel(topic, chanParams = {}) {\n    let chan = new Channel(topic, chanParams, this);\n    this.channels.push(chan);\n    return chan;\n  }\n\n  push(data) {\n    if (this.hasLogger()) {\n      let {\n        topic,\n        event,\n        payload,\n        ref,\n        join_ref\n      } = data;\n      this.log(\"push\", `${topic} ${event} (${join_ref}, ${ref})`, payload);\n    }\n\n    if (this.isConnected()) {\n      this.encode(data, result => this.conn.send(result));\n    } else {\n      this.sendBuffer.push(() => this.encode(data, result => this.conn.send(result)));\n    }\n  }\n\n  makeRef() {\n    let newRef = this.ref + 1;\n\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n\n    return this.ref.toString();\n  }\n\n  sendHeartbeat() {\n    if (this.pendingHeartbeatRef && !this.isConnected()) {\n      return;\n    }\n\n    this.pendingHeartbeatRef = this.makeRef();\n    this.push({\n      topic: \"phoenix\",\n      event: \"heartbeat\",\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.heartbeatTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);\n  }\n\n  abnormalClose(reason) {\n    this.closeWasClean = false;\n\n    if (this.isConnected()) {\n      this.conn.close(WS_CLOSE_NORMAL, reason);\n    }\n  }\n\n  flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n\n  onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref,\n        join_ref\n      } = msg;\n\n      if (ref && ref === this.pendingHeartbeatRef) {\n        clearTimeout(this.heartbeatTimer);\n        this.pendingHeartbeatRef = null;\n        setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n      }\n\n      if (this.hasLogger()) this.log(\"receive\", `${payload.status || \"\"} ${topic} ${event} ${ref && \"(\" + ref + \")\" || \"\"}`, payload);\n\n      for (let i = 0; i < this.channels.length; i++) {\n        const channel = this.channels[i];\n\n        if (!channel.isMember(topic, event, payload, join_ref)) {\n          continue;\n        }\n\n        channel.trigger(event, payload, ref, join_ref);\n      }\n\n      for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {\n        let [, callback] = this.stateChangeCallbacks.message[i];\n        callback(msg);\n      }\n    });\n  }\n\n  leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c.isJoined() || c.isJoining()));\n\n    if (dupChannel) {\n      if (this.hasLogger()) this.log(\"transport\", `leaving duplicate topic \"${topic}\"`);\n      dupChannel.leave();\n    }\n  }\n\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../deps/phoenix/priv/static/phoenix.esm.js\n");

/***/ }),

/***/ "../deps/phoenix_html/priv/static/phoenix_html.js":
/*!********************************************************!*\
  !*** ../deps/phoenix_html/priv/static/phoenix_html.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function () {\n  var PolyfillEvent = eventConstructor();\n\n  function eventConstructor() {\n    if (typeof window.CustomEvent === \"function\") return window.CustomEvent; // IE<=9 Support\n\n    function CustomEvent(event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n    return CustomEvent;\n  }\n\n  function buildHiddenInput(name, value) {\n    var input = document.createElement(\"input\");\n    input.type = \"hidden\";\n    input.name = name;\n    input.value = value;\n    return input;\n  }\n\n  function handleClick(element, targetModifierKey) {\n    var to = element.getAttribute(\"data-to\"),\n        method = buildHiddenInput(\"_method\", element.getAttribute(\"data-method\")),\n        csrf = buildHiddenInput(\"_csrf_token\", element.getAttribute(\"data-csrf\")),\n        form = document.createElement(\"form\"),\n        target = element.getAttribute(\"target\");\n    form.method = element.getAttribute(\"data-method\") === \"get\" ? \"get\" : \"post\";\n    form.action = to;\n    form.style.display = \"hidden\";\n    if (target) form.target = target;else if (targetModifierKey) form.target = \"_blank\";\n    form.appendChild(csrf);\n    form.appendChild(method);\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  window.addEventListener(\"click\", function (e) {\n    var element = e.target;\n    if (e.defaultPrevented) return;\n\n    while (element && element.getAttribute) {\n      var phoenixLinkEvent = new PolyfillEvent('phoenix.link.click', {\n        \"bubbles\": true,\n        \"cancelable\": true\n      });\n\n      if (!element.dispatchEvent(phoenixLinkEvent)) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return false;\n      }\n\n      if (element.getAttribute(\"data-method\")) {\n        handleClick(element, e.metaKey || e.shiftKey);\n        e.preventDefault();\n        return false;\n      } else {\n        element = element.parentNode;\n      }\n    }\n  }, false);\n  window.addEventListener('phoenix.link.click', function (e) {\n    var message = e.target.getAttribute(\"data-confirm\");\n\n    if (message && !window.confirm(message)) {\n      e.preventDefault();\n    }\n  }, false);\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZGVwcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2RlcHMvcGhvZW5peF9odG1sL3ByaXYvc3RhdGljL3Bob2VuaXhfaHRtbC5qcz80N2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBQb2x5ZmlsbEV2ZW50ID0gZXZlbnRDb25zdHJ1Y3RvcigpO1xuXG4gIGZ1bmN0aW9uIGV2ZW50Q29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHdpbmRvdy5DdXN0b21FdmVudDtcbiAgICAvLyBJRTw9OSBTdXBwb3J0XG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkfTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICByZXR1cm4gZXZ0O1xuICAgIH1cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICAgIHJldHVybiBDdXN0b21FdmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSGlkZGVuSW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgaW5wdXQubmFtZSA9IG5hbWU7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhlbGVtZW50LCB0YXJnZXRNb2RpZmllcktleSkge1xuICAgIHZhciB0byA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10b1wiKSxcbiAgICAgICAgbWV0aG9kID0gYnVpbGRIaWRkZW5JbnB1dChcIl9tZXRob2RcIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSksXG4gICAgICAgIGNzcmYgPSBidWlsZEhpZGRlbklucHV0KFwiX2NzcmZfdG9rZW5cIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzcmZcIikpLFxuICAgICAgICBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAgIHRhcmdldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuXG4gICAgZm9ybS5tZXRob2QgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PT0gXCJnZXRcIikgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgZm9ybS5hY3Rpb24gPSB0bztcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcImhpZGRlblwiO1xuXG4gICAgaWYgKHRhcmdldCkgZm9ybS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgZWxzZSBpZiAodGFyZ2V0TW9kaWZpZXJLZXkpIGZvcm0udGFyZ2V0ID0gXCJfYmxhbmtcIjtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoY3NyZik7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChtZXRob2QpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gICAgZm9ybS5zdWJtaXQoKTtcbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHZhciBwaG9lbml4TGlua0V2ZW50ID0gbmV3IFBvbHlmaWxsRXZlbnQoJ3Bob2VuaXgubGluay5jbGljaycsIHtcbiAgICAgICAgXCJidWJibGVzXCI6IHRydWUsIFwiY2FuY2VsYWJsZVwiOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFlbGVtZW50LmRpc3BhdGNoRXZlbnQocGhvZW5peExpbmtFdmVudCkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpKSB7XG4gICAgICAgIGhhbmRsZUNsaWNrKGVsZW1lbnQsIGUubWV0YUtleSB8fCBlLnNoaWZ0S2V5KTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZmFsc2UpO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwaG9lbml4LmxpbmsuY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtZXNzYWdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maXJtXCIpO1xuICAgIGlmKG1lc3NhZ2UgJiYgIXdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG59KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../deps/phoenix_html/priv/static/phoenix_html.js\n");

/***/ }),

/***/ "./css/app.scss":
/*!**********************!*\
  !*** ./css/app.scss ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jc3MvYXBwLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jc3MvYXBwLnNjc3M/MjQyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./css/app.scss\n");

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_app_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/app.scss */ \"./css/app.scss\");\n/* harmony import */ var _css_app_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_app_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phoenix_html */ \"../deps/phoenix_html/priv/static/phoenix_html.js\");\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(phoenix_html__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var phoenix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! phoenix */ \"../deps/phoenix/priv/static/phoenix.esm.js\");\n/* harmony import */ var phoenix_live_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! phoenix_live_view */ \"./node_modules/phoenix_live_view/priv/static/phoenix_live_view.esm.js\");\n/* harmony import */ var _vendor_topbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../vendor/topbar */ \"./vendor/topbar.js\");\n/* harmony import */ var _vendor_topbar__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_vendor_topbar__WEBPACK_IMPORTED_MODULE_4__);\n// We import the CSS which is extracted to its own file by esbuild.\n// Remove this line if you add a your own CSS build pipeline (e.g postcss).\n // If you want to use Phoenix channels, run `mix help phx.gen.channel`\n// to get started and then uncomment the line below.\n// import \"./user_socket.js\"\n// You can include dependencies in two ways.\n//\n// The simplest option is to put them in assets/vendor and\n// import them using relative paths:\n//\n//     import \"./vendor/some-package.js\"\n//\n// Alternatively, you can `npm install some-package` and import\n// them using a path starting with the package name:\n//\n//     import \"some-package\"\n//\n// Include phoenix_html to handle method=PUT/DELETE in forms and buttons.\n\n // Establish Phoenix Socket and LiveView configuration.\n\n\n\n\nvar csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\");\nvar liveSocket = new phoenix_live_view__WEBPACK_IMPORTED_MODULE_3__[\"LiveSocket\"](\"/live\", phoenix__WEBPACK_IMPORTED_MODULE_2__[\"Socket\"], {\n  params: {\n    _csrf_token: csrfToken\n  }\n}); // Show progress bar on live navigation and form submits\n\n_vendor_topbar__WEBPACK_IMPORTED_MODULE_4___default.a.config({\n  barColors: {\n    0: \"#29d\"\n  },\n  shadowColor: \"rgba(0, 0, 0, .3)\"\n});\nwindow.addEventListener(\"phx:page-loading-start\", function (info) {\n  return _vendor_topbar__WEBPACK_IMPORTED_MODULE_4___default.a.show();\n});\nwindow.addEventListener(\"phx:page-loading-stop\", function (info) {\n  return _vendor_topbar__WEBPACK_IMPORTED_MODULE_4___default.a.hide();\n}); // connect if there are any LiveViews on the page\n\nliveSocket.connect(); // expose liveSocket on window for web console debug logs and latency simulation:\n// >> liveSocket.enableDebug()\n// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session\n// >> liveSocket.disableLatencySim()\n\nwindow.liveSocket = liveSocket;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9hcHAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hcHAuanM/NzQ3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBpbXBvcnQgdGhlIENTUyB3aGljaCBpcyBleHRyYWN0ZWQgdG8gaXRzIG93biBmaWxlIGJ5IGVzYnVpbGQuXG4vLyBSZW1vdmUgdGhpcyBsaW5lIGlmIHlvdSBhZGQgYSB5b3VyIG93biBDU1MgYnVpbGQgcGlwZWxpbmUgKGUuZyBwb3N0Y3NzKS5cbmltcG9ydCBcIi4uL2Nzcy9hcHAuc2Nzc1wiXG5cbi8vIElmIHlvdSB3YW50IHRvIHVzZSBQaG9lbml4IGNoYW5uZWxzLCBydW4gYG1peCBoZWxwIHBoeC5nZW4uY2hhbm5lbGBcbi8vIHRvIGdldCBzdGFydGVkIGFuZCB0aGVuIHVuY29tbWVudCB0aGUgbGluZSBiZWxvdy5cbi8vIGltcG9ydCBcIi4vdXNlcl9zb2NrZXQuanNcIlxuXG4vLyBZb3UgY2FuIGluY2x1ZGUgZGVwZW5kZW5jaWVzIGluIHR3byB3YXlzLlxuLy9cbi8vIFRoZSBzaW1wbGVzdCBvcHRpb24gaXMgdG8gcHV0IHRoZW0gaW4gYXNzZXRzL3ZlbmRvciBhbmRcbi8vIGltcG9ydCB0aGVtIHVzaW5nIHJlbGF0aXZlIHBhdGhzOlxuLy9cbi8vICAgICBpbXBvcnQgXCIuL3ZlbmRvci9zb21lLXBhY2thZ2UuanNcIlxuLy9cbi8vIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gYG5wbSBpbnN0YWxsIHNvbWUtcGFja2FnZWAgYW5kIGltcG9ydFxuLy8gdGhlbSB1c2luZyBhIHBhdGggc3RhcnRpbmcgd2l0aCB0aGUgcGFja2FnZSBuYW1lOlxuLy9cbi8vICAgICBpbXBvcnQgXCJzb21lLXBhY2thZ2VcIlxuLy9cblxuLy8gSW5jbHVkZSBwaG9lbml4X2h0bWwgdG8gaGFuZGxlIG1ldGhvZD1QVVQvREVMRVRFIGluIGZvcm1zIGFuZCBidXR0b25zLlxuaW1wb3J0IFwicGhvZW5peF9odG1sXCJcbi8vIEVzdGFibGlzaCBQaG9lbml4IFNvY2tldCBhbmQgTGl2ZVZpZXcgY29uZmlndXJhdGlvbi5cbmltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG5pbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG5pbXBvcnQgdG9wYmFyIGZyb20gXCIuLi92ZW5kb3IvdG9wYmFyXCJcblxubGV0IGNzcmZUb2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2NzcmYtdG9rZW4nXVwiKS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpXG5sZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7cGFyYW1zOiB7X2NzcmZfdG9rZW46IGNzcmZUb2tlbn19KVxuXG4vLyBTaG93IHByb2dyZXNzIGJhciBvbiBsaXZlIG5hdmlnYXRpb24gYW5kIGZvcm0gc3VibWl0c1xudG9wYmFyLmNvbmZpZyh7YmFyQ29sb3JzOiB7MDogXCIjMjlkXCJ9LCBzaGFkb3dDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIC4zKVwifSlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCBpbmZvID0+IHRvcGJhci5zaG93KCkpXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpwYWdlLWxvYWRpbmctc3RvcFwiLCBpbmZvID0+IHRvcGJhci5oaWRlKCkpXG5cbi8vIGNvbm5lY3QgaWYgdGhlcmUgYXJlIGFueSBMaXZlVmlld3Mgb24gdGhlIHBhZ2VcbmxpdmVTb2NrZXQuY29ubmVjdCgpXG5cbi8vIGV4cG9zZSBsaXZlU29ja2V0IG9uIHdpbmRvdyBmb3Igd2ViIGNvbnNvbGUgZGVidWcgbG9ncyBhbmQgbGF0ZW5jeSBzaW11bGF0aW9uOlxuLy8gPj4gbGl2ZVNvY2tldC5lbmFibGVEZWJ1ZygpXG4vLyA+PiBsaXZlU29ja2V0LmVuYWJsZUxhdGVuY3lTaW0oMTAwMCkgIC8vIGVuYWJsZWQgZm9yIGR1cmF0aW9uIG9mIGJyb3dzZXIgc2Vzc2lvblxuLy8gPj4gbGl2ZVNvY2tldC5kaXNhYmxlTGF0ZW5jeVNpbSgpXG53aW5kb3cubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/app.js\n");

/***/ }),

/***/ "./node_modules/phoenix_live_view/priv/static/phoenix_live_view.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/phoenix_live_view/priv/static/phoenix_live_view.esm.js ***!
  \*****************************************************************************/
/*! exports provided: LiveSocket */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LiveSocket\", function() { return LiveSocket; });\n// js/phoenix_live_view/constants.js\nvar CONSECUTIVE_RELOADS = \"consecutive-reloads\";\nvar MAX_RELOADS = 10;\nvar RELOAD_JITTER = [1e3, 3e3];\nvar FAILSAFE_JITTER = 3e4;\nvar PHX_EVENT_CLASSES = [\n  \"phx-click-loading\",\n  \"phx-change-loading\",\n  \"phx-submit-loading\",\n  \"phx-keydown-loading\",\n  \"phx-keyup-loading\",\n  \"phx-blur-loading\",\n  \"phx-focus-loading\"\n];\nvar PHX_COMPONENT = \"data-phx-component\";\nvar PHX_LIVE_LINK = \"data-phx-link\";\nvar PHX_TRACK_STATIC = \"track-static\";\nvar PHX_LINK_STATE = \"data-phx-link-state\";\nvar PHX_REF = \"data-phx-ref\";\nvar PHX_TRACK_UPLOADS = \"track-uploads\";\nvar PHX_UPLOAD_REF = \"data-phx-upload-ref\";\nvar PHX_PREFLIGHTED_REFS = \"data-phx-preflighted-refs\";\nvar PHX_DONE_REFS = \"data-phx-done-refs\";\nvar PHX_DROP_TARGET = \"drop-target\";\nvar PHX_ACTIVE_ENTRY_REFS = \"data-phx-active-refs\";\nvar PHX_LIVE_FILE_UPDATED = \"phx:live-file:updated\";\nvar PHX_SKIP = \"data-phx-skip\";\nvar PHX_PRUNE = \"data-phx-prune\";\nvar PHX_PAGE_LOADING = \"page-loading\";\nvar PHX_CONNECTED_CLASS = \"phx-connected\";\nvar PHX_DISCONNECTED_CLASS = \"phx-loading\";\nvar PHX_NO_FEEDBACK_CLASS = \"phx-no-feedback\";\nvar PHX_ERROR_CLASS = \"phx-error\";\nvar PHX_PARENT_ID = \"data-phx-parent-id\";\nvar PHX_MAIN = \"data-phx-main\";\nvar PHX_ROOT_ID = \"data-phx-root-id\";\nvar PHX_TRIGGER_ACTION = \"trigger-action\";\nvar PHX_FEEDBACK_FOR = \"feedback-for\";\nvar PHX_HAS_FOCUSED = \"phx-has-focused\";\nvar FOCUSABLE_INPUTS = [\"text\", \"textarea\", \"number\", \"email\", \"password\", \"search\", \"tel\", \"url\", \"date\", \"time\"];\nvar CHECKABLE_INPUTS = [\"checkbox\", \"radio\"];\nvar PHX_HAS_SUBMITTED = \"phx-has-submitted\";\nvar PHX_SESSION = \"data-phx-session\";\nvar PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;\nvar PHX_STATIC = \"data-phx-static\";\nvar PHX_READONLY = \"data-phx-readonly\";\nvar PHX_DISABLED = \"data-phx-disabled\";\nvar PHX_DISABLE_WITH = \"disable-with\";\nvar PHX_DISABLE_WITH_RESTORE = \"data-phx-disable-with-restore\";\nvar PHX_HOOK = \"hook\";\nvar PHX_DEBOUNCE = \"debounce\";\nvar PHX_THROTTLE = \"throttle\";\nvar PHX_UPDATE = \"update\";\nvar PHX_KEY = \"key\";\nvar PHX_PRIVATE = \"phxPrivate\";\nvar PHX_AUTO_RECOVER = \"auto-recover\";\nvar PHX_LV_DEBUG = \"phx:live-socket:debug\";\nvar PHX_LV_PROFILE = \"phx:live-socket:profiling\";\nvar PHX_LV_LATENCY_SIM = \"phx:live-socket:latency-sim\";\nvar PHX_PROGRESS = \"progress\";\nvar LOADER_TIMEOUT = 1;\nvar BEFORE_UNLOAD_LOADER_TIMEOUT = 200;\nvar BINDING_PREFIX = \"phx-\";\nvar PUSH_TIMEOUT = 3e4;\nvar DEBOUNCE_TRIGGER = \"debounce-trigger\";\nvar THROTTLED = \"throttled\";\nvar DEBOUNCE_PREV_KEY = \"debounce-prev-key\";\nvar DEFAULTS = {\n  debounce: 300,\n  throttle: 300\n};\nvar DYNAMICS = \"d\";\nvar STATIC = \"s\";\nvar COMPONENTS = \"c\";\nvar EVENTS = \"e\";\nvar REPLY = \"r\";\nvar TITLE = \"t\";\nvar TEMPLATES = \"p\";\n\n// js/phoenix_live_view/entry_uploader.js\nvar EntryUploader = class {\n  constructor(entry, chunkSize, liveSocket) {\n    this.liveSocket = liveSocket;\n    this.entry = entry;\n    this.offset = 0;\n    this.chunkSize = chunkSize;\n    this.chunkTimer = null;\n    this.uploadChannel = liveSocket.channel(`lvu:${entry.ref}`, { token: entry.metadata() });\n  }\n  error(reason) {\n    clearTimeout(this.chunkTimer);\n    this.uploadChannel.leave();\n    this.entry.error(reason);\n  }\n  upload() {\n    this.uploadChannel.onError((reason) => this.error(reason));\n    this.uploadChannel.join().receive(\"ok\", (_data) => this.readNextChunk()).receive(\"error\", (reason) => this.error(reason));\n  }\n  isDone() {\n    return this.offset >= this.entry.file.size;\n  }\n  readNextChunk() {\n    let reader = new window.FileReader();\n    let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);\n    reader.onload = (e) => {\n      if (e.target.error === null) {\n        this.offset += e.target.result.byteLength;\n        this.pushChunk(e.target.result);\n      } else {\n        return logError(\"Read error: \" + e.target.error);\n      }\n    };\n    reader.readAsArrayBuffer(blob);\n  }\n  pushChunk(chunk) {\n    if (!this.uploadChannel.isJoined()) {\n      return;\n    }\n    this.uploadChannel.push(\"chunk\", chunk).receive(\"ok\", () => {\n      this.entry.progress(this.offset / this.entry.file.size * 100);\n      if (!this.isDone()) {\n        this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);\n      }\n    });\n  }\n};\n\n// js/phoenix_live_view/utils.js\nvar logError = (msg, obj) => console.error && console.error(msg, obj);\nvar isCid = (cid) => {\n  let type = typeof cid;\n  return type === \"number\" || type === \"string\" && /^(0|[1-9]\\d*)$/.test(cid);\n};\nfunction detectDuplicateIds() {\n  let ids = new Set();\n  let elems = document.querySelectorAll(\"*[id]\");\n  for (let i = 0, len = elems.length; i < len; i++) {\n    if (ids.has(elems[i].id)) {\n      console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);\n    } else {\n      ids.add(elems[i].id);\n    }\n  }\n}\nvar debug = (view, kind, msg, obj) => {\n  if (view.liveSocket.isDebugEnabled()) {\n    console.log(`${view.id} ${kind}: ${msg} - `, obj);\n  }\n};\nvar closure = (val) => typeof val === \"function\" ? val : function() {\n  return val;\n};\nvar clone = (obj) => {\n  return JSON.parse(JSON.stringify(obj));\n};\nvar closestPhxBinding = (el, binding, borderEl) => {\n  do {\n    if (el.matches(`[${binding}]`)) {\n      return el;\n    }\n    el = el.parentElement || el.parentNode;\n  } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));\n  return null;\n};\nvar isObject = (obj) => {\n  return obj !== null && typeof obj === \"object\" && !(obj instanceof Array);\n};\nvar isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);\nvar isEmpty = (obj) => {\n  for (let x in obj) {\n    return false;\n  }\n  return true;\n};\nvar maybe = (el, callback) => el && callback(el);\nvar channelUploader = function(entries, onError, resp, liveSocket) {\n  entries.forEach((entry) => {\n    let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket);\n    entryUploader.upload();\n  });\n};\n\n// js/phoenix_live_view/browser.js\nvar Browser = {\n  canPushState() {\n    return typeof history.pushState !== \"undefined\";\n  },\n  dropLocal(localStorage, namespace, subkey) {\n    return localStorage.removeItem(this.localKey(namespace, subkey));\n  },\n  updateLocal(localStorage, namespace, subkey, initial, func) {\n    let current = this.getLocal(localStorage, namespace, subkey);\n    let key = this.localKey(namespace, subkey);\n    let newVal = current === null ? initial : func(current);\n    localStorage.setItem(key, JSON.stringify(newVal));\n    return newVal;\n  },\n  getLocal(localStorage, namespace, subkey) {\n    return JSON.parse(localStorage.getItem(this.localKey(namespace, subkey)));\n  },\n  updateCurrentState(callback) {\n    if (!this.canPushState()) {\n      return;\n    }\n    history.replaceState(callback(history.state || {}), \"\", window.location.href);\n  },\n  pushState(kind, meta, to) {\n    if (this.canPushState()) {\n      if (to !== window.location.href) {\n        if (meta.type == \"redirect\" && meta.scroll) {\n          let currentState = history.state || {};\n          currentState.scroll = meta.scroll;\n          history.replaceState(currentState, \"\", window.location.href);\n        }\n        delete meta.scroll;\n        history[kind + \"State\"](meta, \"\", to || null);\n        let hashEl = this.getHashTargetEl(window.location.hash);\n        if (hashEl) {\n          hashEl.scrollIntoView();\n        } else if (meta.type === \"redirect\") {\n          window.scroll(0, 0);\n        }\n      }\n    } else {\n      this.redirect(to);\n    }\n  },\n  setCookie(name, value) {\n    document.cookie = `${name}=${value}`;\n  },\n  getCookie(name) {\n    return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), \"$1\");\n  },\n  redirect(toURL, flash) {\n    if (flash) {\n      Browser.setCookie(\"__phoenix_flash__\", flash + \"; max-age=60000; path=/\");\n    }\n    window.location = toURL;\n  },\n  localKey(namespace, subkey) {\n    return `${namespace}-${subkey}`;\n  },\n  getHashTargetEl(maybeHash) {\n    let hash = maybeHash.toString().substring(1);\n    if (hash === \"\") {\n      return;\n    }\n    return document.getElementById(hash) || document.querySelector(`a[name=\"${hash}\"]`);\n  }\n};\nvar browser_default = Browser;\n\n// js/phoenix_live_view/dom.js\nvar DOM = {\n  byId(id) {\n    return document.getElementById(id) || logError(`no id found for ${id}`);\n  },\n  removeClass(el, className) {\n    el.classList.remove(className);\n    if (el.classList.length === 0) {\n      el.removeAttribute(\"class\");\n    }\n  },\n  all(node, query, callback) {\n    if (!node) {\n      return [];\n    }\n    let array = Array.from(node.querySelectorAll(query));\n    return callback ? array.forEach(callback) : array;\n  },\n  childNodeLength(html) {\n    let template = document.createElement(\"template\");\n    template.innerHTML = html;\n    return template.content.childElementCount;\n  },\n  isUploadInput(el) {\n    return el.type === \"file\" && el.getAttribute(PHX_UPLOAD_REF) !== null;\n  },\n  findUploadInputs(node) {\n    return this.all(node, `input[type=\"file\"][${PHX_UPLOAD_REF}]`);\n  },\n  findComponentNodeList(node, cid) {\n    return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}=\"${cid}\"]`), node);\n  },\n  isPhxDestroyed(node) {\n    return node.id && DOM.private(node, \"destroyed\") ? true : false;\n  },\n  markPhxChildDestroyed(el) {\n    if (this.isPhxChild(el)) {\n      el.setAttribute(PHX_SESSION, \"\");\n    }\n    this.putPrivate(el, \"destroyed\", true);\n  },\n  findPhxChildrenInFragment(html, parentId) {\n    let template = document.createElement(\"template\");\n    template.innerHTML = html;\n    return this.findPhxChildren(template.content, parentId);\n  },\n  isIgnored(el, phxUpdate) {\n    return (el.getAttribute(phxUpdate) || el.getAttribute(\"data-phx-update\")) === \"ignore\";\n  },\n  isPhxUpdate(el, phxUpdate, updateTypes) {\n    return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;\n  },\n  findPhxChildren(el, parentId) {\n    return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}=\"${parentId}\"]`);\n  },\n  findParentCIDs(node, cids) {\n    let initial = new Set(cids);\n    return cids.reduce((acc, cid) => {\n      let selector = `[${PHX_COMPONENT}=\"${cid}\"] [${PHX_COMPONENT}]`;\n      this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));\n      return acc;\n    }, initial);\n  },\n  filterWithinSameLiveView(nodes, parent) {\n    if (parent.querySelector(PHX_VIEW_SELECTOR)) {\n      return nodes.filter((el) => this.withinSameLiveView(el, parent));\n    } else {\n      return nodes;\n    }\n  },\n  withinSameLiveView(node, parent) {\n    while (node = node.parentNode) {\n      if (node.isSameNode(parent)) {\n        return true;\n      }\n      if (node.getAttribute(PHX_SESSION) !== null) {\n        return false;\n      }\n    }\n  },\n  private(el, key) {\n    return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];\n  },\n  deletePrivate(el, key) {\n    el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];\n  },\n  putPrivate(el, key, value) {\n    if (!el[PHX_PRIVATE]) {\n      el[PHX_PRIVATE] = {};\n    }\n    el[PHX_PRIVATE][key] = value;\n  },\n  updatePrivate(el, key, defaultVal, updateFunc) {\n    let existing = this.private(el, key);\n    if (existing === void 0) {\n      this.putPrivate(el, key, updateFunc(defaultVal));\n    } else {\n      this.putPrivate(el, key, updateFunc(existing));\n    }\n  },\n  copyPrivates(target, source) {\n    if (source[PHX_PRIVATE]) {\n      target[PHX_PRIVATE] = source[PHX_PRIVATE];\n    }\n  },\n  putTitle(str) {\n    let titleEl = document.querySelector(\"title\");\n    let { prefix, suffix } = titleEl.dataset;\n    document.title = `${prefix || \"\"}${str}${suffix || \"\"}`;\n  },\n  debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, callback) {\n    let debounce = el.getAttribute(phxDebounce);\n    let throttle = el.getAttribute(phxThrottle);\n    if (debounce === \"\") {\n      debounce = defaultDebounce;\n    }\n    if (throttle === \"\") {\n      throttle = defaultThrottle;\n    }\n    let value = debounce || throttle;\n    switch (value) {\n      case null:\n        return callback();\n      case \"blur\":\n        if (this.once(el, \"debounce-blur\")) {\n          el.addEventListener(\"blur\", () => callback());\n        }\n        return;\n      default:\n        let timeout = parseInt(value);\n        let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();\n        let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);\n        if (isNaN(timeout)) {\n          return logError(`invalid throttle/debounce value: ${value}`);\n        }\n        if (throttle) {\n          let newKeyDown = false;\n          if (event.type === \"keydown\") {\n            let prevKey = this.private(el, DEBOUNCE_PREV_KEY);\n            this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);\n            newKeyDown = prevKey !== event.key;\n          }\n          if (!newKeyDown && this.private(el, THROTTLED)) {\n            return false;\n          } else {\n            callback();\n            this.putPrivate(el, THROTTLED, true);\n            setTimeout(() => this.triggerCycle(el, DEBOUNCE_TRIGGER), timeout);\n          }\n        } else {\n          setTimeout(() => this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle), timeout);\n        }\n        let form = el.form;\n        if (form && this.once(form, \"bind-debounce\")) {\n          form.addEventListener(\"submit\", () => {\n            Array.from(new FormData(form).entries(), ([name]) => {\n              let input = form.querySelector(`[name=\"${name}\"]`);\n              this.incCycle(input, DEBOUNCE_TRIGGER);\n              this.deletePrivate(input, THROTTLED);\n            });\n          });\n        }\n        if (this.once(el, \"bind-debounce\")) {\n          el.addEventListener(\"blur\", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));\n        }\n    }\n  },\n  triggerCycle(el, key, currentCycle) {\n    let [cycle, trigger] = this.private(el, key);\n    if (!currentCycle) {\n      currentCycle = cycle;\n    }\n    if (currentCycle === cycle) {\n      this.incCycle(el, key);\n      trigger();\n    }\n  },\n  once(el, key) {\n    if (this.private(el, key) === true) {\n      return false;\n    }\n    this.putPrivate(el, key, true);\n    return true;\n  },\n  incCycle(el, key, trigger = function() {\n  }) {\n    let [currentCycle] = this.private(el, key) || [0, trigger];\n    currentCycle++;\n    this.putPrivate(el, key, [currentCycle, trigger]);\n    return currentCycle;\n  },\n  discardError(container, el, phxFeedbackFor) {\n    let field = el.getAttribute && el.getAttribute(phxFeedbackFor);\n    let input = field && container.querySelector(`[id=\"${field}\"], [name=\"${field}\"]`);\n    if (!input) {\n      return;\n    }\n    if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input.form, PHX_HAS_SUBMITTED))) {\n      el.classList.add(PHX_NO_FEEDBACK_CLASS);\n    }\n  },\n  showError(inputEl, phxFeedbackFor) {\n    if (inputEl.id || inputEl.name) {\n      this.all(inputEl.form, `[${phxFeedbackFor}=\"${inputEl.id}\"], [${phxFeedbackFor}=\"${inputEl.name}\"]`, (el) => {\n        this.removeClass(el, PHX_NO_FEEDBACK_CLASS);\n      });\n    }\n  },\n  isPhxChild(node) {\n    return node.getAttribute && node.getAttribute(PHX_PARENT_ID);\n  },\n  firstPhxChild(el) {\n    return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];\n  },\n  dispatchEvent(target, eventString, detail = {}) {\n    let event = new CustomEvent(eventString, { bubbles: true, cancelable: true, detail });\n    target.dispatchEvent(event);\n  },\n  cloneNode(node, html) {\n    if (typeof html === \"undefined\") {\n      return node.cloneNode(true);\n    } else {\n      let cloned = node.cloneNode(false);\n      cloned.innerHTML = html;\n      return cloned;\n    }\n  },\n  mergeAttrs(target, source, opts = {}) {\n    let exclude = opts.exclude || [];\n    let isIgnored = opts.isIgnored;\n    let sourceAttrs = source.attributes;\n    for (let i = sourceAttrs.length - 1; i >= 0; i--) {\n      let name = sourceAttrs[i].name;\n      if (exclude.indexOf(name) < 0) {\n        target.setAttribute(name, source.getAttribute(name));\n      }\n    }\n    let targetAttrs = target.attributes;\n    for (let i = targetAttrs.length - 1; i >= 0; i--) {\n      let name = targetAttrs[i].name;\n      if (isIgnored) {\n        if (name.startsWith(\"data-\") && !source.hasAttribute(name)) {\n          target.removeAttribute(name);\n        }\n      } else {\n        if (!source.hasAttribute(name)) {\n          target.removeAttribute(name);\n        }\n      }\n    }\n  },\n  mergeFocusedInput(target, source) {\n    if (!(target instanceof HTMLSelectElement)) {\n      DOM.mergeAttrs(target, source, { except: [\"value\"] });\n    }\n    if (source.readOnly) {\n      target.setAttribute(\"readonly\", true);\n    } else {\n      target.removeAttribute(\"readonly\");\n    }\n  },\n  hasSelectionRange(el) {\n    return el.setSelectionRange && (el.type === \"text\" || el.type === \"textarea\");\n  },\n  restoreFocus(focused, selectionStart, selectionEnd) {\n    if (!DOM.isTextualInput(focused)) {\n      return;\n    }\n    let wasFocused = focused.matches(\":focus\");\n    if (focused.readOnly) {\n      focused.blur();\n    }\n    if (!wasFocused) {\n      focused.focus();\n    }\n    if (this.hasSelectionRange(focused)) {\n      focused.setSelectionRange(selectionStart, selectionEnd);\n    }\n  },\n  isFormInput(el) {\n    return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== \"button\";\n  },\n  syncAttrsToProps(el) {\n    if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {\n      el.checked = el.getAttribute(\"checked\") !== null;\n    }\n  },\n  isTextualInput(el) {\n    return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;\n  },\n  isNowTriggerFormExternal(el, phxTriggerExternal) {\n    return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;\n  },\n  syncPendingRef(fromEl, toEl, disableWith) {\n    let ref = fromEl.getAttribute(PHX_REF);\n    if (ref === null) {\n      return true;\n    }\n    if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {\n      if (DOM.isUploadInput(fromEl)) {\n        DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });\n      }\n      DOM.putPrivate(fromEl, PHX_REF, toEl);\n      return false;\n    } else {\n      PHX_EVENT_CLASSES.forEach((className) => {\n        fromEl.classList.contains(className) && toEl.classList.add(className);\n      });\n      toEl.setAttribute(PHX_REF, ref);\n      return true;\n    }\n  },\n  cleanChildNodes(container, phxUpdate) {\n    if (DOM.isPhxUpdate(container, phxUpdate, [\"append\", \"prepend\"])) {\n      let toRemove = [];\n      container.childNodes.forEach((childNode) => {\n        if (!childNode.id) {\n          let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === \"\";\n          if (!isEmptyTextNode) {\n            logError(`only HTML element tags with an id are allowed inside containers with phx-update.\n\nremoving illegal node: \"${(childNode.outerHTML || childNode.nodeValue).trim()}\"\n\n`);\n          }\n          toRemove.push(childNode);\n        }\n      });\n      toRemove.forEach((childNode) => childNode.remove());\n    }\n  },\n  replaceRootContainer(container, tagName, attrs) {\n    let retainedAttrs = new Set([\"id\", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);\n    if (container.tagName.toLowerCase() === tagName.toLowerCase()) {\n      Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));\n      Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));\n      return container;\n    } else {\n      let newContainer = document.createElement(tagName);\n      Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));\n      retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));\n      newContainer.innerHTML = container.innerHTML;\n      container.replaceWith(newContainer);\n      return newContainer;\n    }\n  },\n  getSticky(el, name, defaultVal) {\n    let op = (DOM.private(el, \"sticky\") || []).find(([existingName]) => name === existingName);\n    if (op) {\n      let [_name, _op, stashedResult] = op;\n      return stashedResult;\n    } else {\n      return typeof defaultVal === \"function\" ? defaultVal() : defaultVal;\n    }\n  },\n  deleteSticky(el, name) {\n    this.updatePrivate(el, \"sticky\", [], (ops) => {\n      return ops.filter(([existingName, _]) => existingName !== name);\n    });\n  },\n  putSticky(el, name, op) {\n    let stashedResult = op(el);\n    this.updatePrivate(el, \"sticky\", [], (ops) => {\n      let existingIndex = ops.findIndex(([existingName]) => name === existingName);\n      if (existingIndex >= 0) {\n        ops[existingIndex] = [name, op, stashedResult];\n      } else {\n        ops.push([name, op, stashedResult]);\n      }\n      return ops;\n    });\n  },\n  applyStickyOperations(el) {\n    let ops = DOM.private(el, \"sticky\");\n    if (!ops) {\n      return;\n    }\n    ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));\n  }\n};\nvar dom_default = DOM;\n\n// js/phoenix_live_view/upload_entry.js\nvar UploadEntry = class {\n  static isActive(fileEl, file) {\n    let isNew = file._phxRef === void 0;\n    let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(\",\");\n    let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;\n    return file.size > 0 && (isNew || isActive);\n  }\n  static isPreflighted(fileEl, file) {\n    let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(\",\");\n    let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;\n    return isPreflighted && this.isActive(fileEl, file);\n  }\n  constructor(fileEl, file, view) {\n    this.ref = LiveUploader.genFileRef(file);\n    this.fileEl = fileEl;\n    this.file = file;\n    this.view = view;\n    this.meta = null;\n    this._isCancelled = false;\n    this._isDone = false;\n    this._progress = 0;\n    this._lastProgressSent = -1;\n    this._onDone = function() {\n    };\n    this._onElUpdated = this.onElUpdated.bind(this);\n    this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);\n  }\n  metadata() {\n    return this.meta;\n  }\n  progress(progress) {\n    this._progress = Math.floor(progress);\n    if (this._progress > this._lastProgressSent) {\n      if (this._progress >= 100) {\n        this._progress = 100;\n        this._lastProgressSent = 100;\n        this._isDone = true;\n        this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {\n          LiveUploader.untrackFile(this.fileEl, this.file);\n          this._onDone();\n        });\n      } else {\n        this._lastProgressSent = this._progress;\n        this.view.pushFileProgress(this.fileEl, this.ref, this._progress);\n      }\n    }\n  }\n  cancel() {\n    this._isCancelled = true;\n    this._isDone = true;\n    this._onDone();\n  }\n  isDone() {\n    return this._isDone;\n  }\n  error(reason = \"failed\") {\n    this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });\n    LiveUploader.clearFiles(this.fileEl);\n  }\n  onDone(callback) {\n    this._onDone = () => {\n      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);\n      callback();\n    };\n  }\n  onElUpdated() {\n    let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(\",\");\n    if (activeRefs.indexOf(this.ref) === -1) {\n      this.cancel();\n    }\n  }\n  toPreflightPayload() {\n    return {\n      last_modified: this.file.lastModified,\n      name: this.file.name,\n      size: this.file.size,\n      type: this.file.type,\n      ref: this.ref\n    };\n  }\n  uploader(uploaders) {\n    if (this.meta.uploader) {\n      let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);\n      return { name: this.meta.uploader, callback };\n    } else {\n      return { name: \"channel\", callback: channelUploader };\n    }\n  }\n  zipPostFlight(resp) {\n    this.meta = resp.entries[this.ref];\n    if (!this.meta) {\n      logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });\n    }\n  }\n};\n\n// js/phoenix_live_view/live_uploader.js\nvar liveUploaderFileRef = 0;\nvar LiveUploader = class {\n  static genFileRef(file) {\n    let ref = file._phxRef;\n    if (ref !== void 0) {\n      return ref;\n    } else {\n      file._phxRef = (liveUploaderFileRef++).toString();\n      return file._phxRef;\n    }\n  }\n  static getEntryDataURL(inputEl, ref, callback) {\n    let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);\n    callback(URL.createObjectURL(file));\n  }\n  static hasUploadsInProgress(formEl) {\n    let active = 0;\n    dom_default.findUploadInputs(formEl).forEach((input) => {\n      if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {\n        active++;\n      }\n    });\n    return active > 0;\n  }\n  static serializeUploads(inputEl) {\n    let files = this.activeFiles(inputEl);\n    let fileData = {};\n    files.forEach((file) => {\n      let entry = { path: inputEl.name };\n      let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);\n      fileData[uploadRef] = fileData[uploadRef] || [];\n      entry.ref = this.genFileRef(file);\n      entry.name = file.name || entry.ref;\n      entry.type = file.type;\n      entry.size = file.size;\n      fileData[uploadRef].push(entry);\n    });\n    return fileData;\n  }\n  static clearFiles(inputEl) {\n    inputEl.value = null;\n    inputEl.removeAttribute(PHX_UPLOAD_REF);\n    dom_default.putPrivate(inputEl, \"files\", []);\n  }\n  static untrackFile(inputEl, file) {\n    dom_default.putPrivate(inputEl, \"files\", dom_default.private(inputEl, \"files\").filter((f) => !Object.is(f, file)));\n  }\n  static trackFiles(inputEl, files) {\n    if (inputEl.getAttribute(\"multiple\") !== null) {\n      let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f) => Object.is(f, file)));\n      dom_default.putPrivate(inputEl, \"files\", this.activeFiles(inputEl).concat(newFiles));\n      inputEl.value = null;\n    } else {\n      dom_default.putPrivate(inputEl, \"files\", files);\n    }\n  }\n  static activeFileInputs(formEl) {\n    let fileInputs = dom_default.findUploadInputs(formEl);\n    return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);\n  }\n  static activeFiles(input) {\n    return (dom_default.private(input, \"files\") || []).filter((f) => UploadEntry.isActive(input, f));\n  }\n  static inputsAwaitingPreflight(formEl) {\n    let fileInputs = dom_default.findUploadInputs(formEl);\n    return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);\n  }\n  static filesAwaitingPreflight(input) {\n    return this.activeFiles(input).filter((f) => !UploadEntry.isPreflighted(input, f));\n  }\n  constructor(inputEl, view, onComplete) {\n    this.view = view;\n    this.onComplete = onComplete;\n    this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view));\n    this.numEntriesInProgress = this._entries.length;\n  }\n  entries() {\n    return this._entries;\n  }\n  initAdapterUpload(resp, onError, liveSocket) {\n    this._entries = this._entries.map((entry) => {\n      entry.zipPostFlight(resp);\n      entry.onDone(() => {\n        this.numEntriesInProgress--;\n        if (this.numEntriesInProgress === 0) {\n          this.onComplete();\n        }\n      });\n      return entry;\n    });\n    let groupedEntries = this._entries.reduce((acc, entry) => {\n      let { name, callback } = entry.uploader(liveSocket.uploaders);\n      acc[name] = acc[name] || { callback, entries: [] };\n      acc[name].entries.push(entry);\n      return acc;\n    }, {});\n    for (let name in groupedEntries) {\n      let { callback, entries } = groupedEntries[name];\n      callback(entries, onError, resp, liveSocket);\n    }\n  }\n};\n\n// js/phoenix_live_view/hooks.js\nvar Hooks = {\n  LiveFileUpload: {\n    activeRefs() {\n      return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);\n    },\n    preflightedRefs() {\n      return this.el.getAttribute(PHX_PREFLIGHTED_REFS);\n    },\n    mounted() {\n      this.preflightedWas = this.preflightedRefs();\n    },\n    updated() {\n      let newPreflights = this.preflightedRefs();\n      if (this.preflightedWas !== newPreflights) {\n        this.preflightedWas = newPreflights;\n        if (newPreflights === \"\") {\n          this.__view.cancelSubmit(this.el.form);\n        }\n      }\n      if (this.activeRefs() === \"\") {\n        this.el.value = null;\n      }\n      this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));\n    }\n  },\n  LiveImgPreview: {\n    mounted() {\n      this.ref = this.el.getAttribute(\"data-phx-entry-ref\");\n      this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));\n      LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {\n        this.url = url;\n        this.el.src = url;\n      });\n    },\n    destroyed() {\n      URL.revokeObjectURL(this.url);\n    }\n  }\n};\nvar hooks_default = Hooks;\n\n// js/phoenix_live_view/dom_post_morph_restorer.js\nvar DOMPostMorphRestorer = class {\n  constructor(containerBefore, containerAfter, updateType) {\n    let idsBefore = new Set();\n    let idsAfter = new Set([...containerAfter.children].map((child) => child.id));\n    let elementsToModify = [];\n    Array.from(containerBefore.children).forEach((child) => {\n      if (child.id) {\n        idsBefore.add(child.id);\n        if (idsAfter.has(child.id)) {\n          let previousElementId = child.previousElementSibling && child.previousElementSibling.id;\n          elementsToModify.push({ elementId: child.id, previousElementId });\n        }\n      }\n    });\n    this.containerId = containerAfter.id;\n    this.updateType = updateType;\n    this.elementsToModify = elementsToModify;\n    this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));\n  }\n  perform() {\n    let container = dom_default.byId(this.containerId);\n    this.elementsToModify.forEach((elementToModify) => {\n      if (elementToModify.previousElementId) {\n        maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {\n          maybe(document.getElementById(elementToModify.elementId), (elem) => {\n            let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;\n            if (!isInRightPlace) {\n              previousElem.insertAdjacentElement(\"afterend\", elem);\n            }\n          });\n        });\n      } else {\n        maybe(document.getElementById(elementToModify.elementId), (elem) => {\n          let isInRightPlace = elem.previousElementSibling == null;\n          if (!isInRightPlace) {\n            container.insertAdjacentElement(\"afterbegin\", elem);\n          }\n        });\n      }\n    });\n    if (this.updateType == \"prepend\") {\n      this.elementIdsToAdd.reverse().forEach((elemId) => {\n        maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement(\"afterbegin\", elem));\n      });\n    }\n  }\n};\n\n// node_modules/morphdom/dist/morphdom-esm.js\nvar DOCUMENT_FRAGMENT_NODE = 11;\nfunction morphAttrs(fromNode, toNode) {\n  var toNodeAttrs = toNode.attributes;\n  var attr;\n  var attrName;\n  var attrNamespaceURI;\n  var attrValue;\n  var fromValue;\n  if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return;\n  }\n  for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n    attr = toNodeAttrs[i];\n    attrName = attr.name;\n    attrNamespaceURI = attr.namespaceURI;\n    attrValue = attr.value;\n    if (attrNamespaceURI) {\n      attrName = attr.localName || attrName;\n      fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n      if (fromValue !== attrValue) {\n        if (attr.prefix === \"xmlns\") {\n          attrName = attr.name;\n        }\n        fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n      }\n    } else {\n      fromValue = fromNode.getAttribute(attrName);\n      if (fromValue !== attrValue) {\n        fromNode.setAttribute(attrName, attrValue);\n      }\n    }\n  }\n  var fromNodeAttrs = fromNode.attributes;\n  for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n    attr = fromNodeAttrs[d];\n    attrName = attr.name;\n    attrNamespaceURI = attr.namespaceURI;\n    if (attrNamespaceURI) {\n      attrName = attr.localName || attrName;\n      if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n        fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n      }\n    } else {\n      if (!toNode.hasAttribute(attrName)) {\n        fromNode.removeAttribute(attrName);\n      }\n    }\n  }\n}\nvar range;\nvar NS_XHTML = \"http://www.w3.org/1999/xhtml\";\nvar doc = typeof document === \"undefined\" ? void 0 : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && \"content\" in doc.createElement(\"template\");\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && \"createContextualFragment\" in doc.createRange();\nfunction createFragmentFromTemplate(str) {\n  var template = doc.createElement(\"template\");\n  template.innerHTML = str;\n  return template.content.childNodes[0];\n}\nfunction createFragmentFromRange(str) {\n  if (!range) {\n    range = doc.createRange();\n    range.selectNode(doc.body);\n  }\n  var fragment = range.createContextualFragment(str);\n  return fragment.childNodes[0];\n}\nfunction createFragmentFromWrap(str) {\n  var fragment = doc.createElement(\"body\");\n  fragment.innerHTML = str;\n  return fragment.childNodes[0];\n}\nfunction toElement(str) {\n  str = str.trim();\n  if (HAS_TEMPLATE_SUPPORT) {\n    return createFragmentFromTemplate(str);\n  } else if (HAS_RANGE_SUPPORT) {\n    return createFragmentFromRange(str);\n  }\n  return createFragmentFromWrap(str);\n}\nfunction compareNodeNames(fromEl, toEl) {\n  var fromNodeName = fromEl.nodeName;\n  var toNodeName = toEl.nodeName;\n  var fromCodeStart, toCodeStart;\n  if (fromNodeName === toNodeName) {\n    return true;\n  }\n  fromCodeStart = fromNodeName.charCodeAt(0);\n  toCodeStart = toNodeName.charCodeAt(0);\n  if (fromCodeStart <= 90 && toCodeStart >= 97) {\n    return fromNodeName === toNodeName.toUpperCase();\n  } else if (toCodeStart <= 90 && fromCodeStart >= 97) {\n    return toNodeName === fromNodeName.toUpperCase();\n  } else {\n    return false;\n  }\n}\nfunction createElementNS(name, namespaceURI) {\n  return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);\n}\nfunction moveChildren(fromEl, toEl) {\n  var curChild = fromEl.firstChild;\n  while (curChild) {\n    var nextChild = curChild.nextSibling;\n    toEl.appendChild(curChild);\n    curChild = nextChild;\n  }\n  return toEl;\n}\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n  if (fromEl[name] !== toEl[name]) {\n    fromEl[name] = toEl[name];\n    if (fromEl[name]) {\n      fromEl.setAttribute(name, \"\");\n    } else {\n      fromEl.removeAttribute(name);\n    }\n  }\n}\nvar specialElHandlers = {\n  OPTION: function(fromEl, toEl) {\n    var parentNode = fromEl.parentNode;\n    if (parentNode) {\n      var parentName = parentNode.nodeName.toUpperCase();\n      if (parentName === \"OPTGROUP\") {\n        parentNode = parentNode.parentNode;\n        parentName = parentNode && parentNode.nodeName.toUpperCase();\n      }\n      if (parentName === \"SELECT\" && !parentNode.hasAttribute(\"multiple\")) {\n        if (fromEl.hasAttribute(\"selected\") && !toEl.selected) {\n          fromEl.setAttribute(\"selected\", \"selected\");\n          fromEl.removeAttribute(\"selected\");\n        }\n        parentNode.selectedIndex = -1;\n      }\n    }\n    syncBooleanAttrProp(fromEl, toEl, \"selected\");\n  },\n  INPUT: function(fromEl, toEl) {\n    syncBooleanAttrProp(fromEl, toEl, \"checked\");\n    syncBooleanAttrProp(fromEl, toEl, \"disabled\");\n    if (fromEl.value !== toEl.value) {\n      fromEl.value = toEl.value;\n    }\n    if (!toEl.hasAttribute(\"value\")) {\n      fromEl.removeAttribute(\"value\");\n    }\n  },\n  TEXTAREA: function(fromEl, toEl) {\n    var newValue = toEl.value;\n    if (fromEl.value !== newValue) {\n      fromEl.value = newValue;\n    }\n    var firstChild = fromEl.firstChild;\n    if (firstChild) {\n      var oldValue = firstChild.nodeValue;\n      if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {\n        return;\n      }\n      firstChild.nodeValue = newValue;\n    }\n  },\n  SELECT: function(fromEl, toEl) {\n    if (!toEl.hasAttribute(\"multiple\")) {\n      var selectedIndex = -1;\n      var i = 0;\n      var curChild = fromEl.firstChild;\n      var optgroup;\n      var nodeName;\n      while (curChild) {\n        nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n        if (nodeName === \"OPTGROUP\") {\n          optgroup = curChild;\n          curChild = optgroup.firstChild;\n        } else {\n          if (nodeName === \"OPTION\") {\n            if (curChild.hasAttribute(\"selected\")) {\n              selectedIndex = i;\n              break;\n            }\n            i++;\n          }\n          curChild = curChild.nextSibling;\n          if (!curChild && optgroup) {\n            curChild = optgroup.nextSibling;\n            optgroup = null;\n          }\n        }\n      }\n      fromEl.selectedIndex = selectedIndex;\n    }\n  }\n};\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nfunction noop() {\n}\nfunction defaultGetNodeKey(node) {\n  if (node) {\n    return node.getAttribute && node.getAttribute(\"id\") || node.id;\n  }\n}\nfunction morphdomFactory(morphAttrs2) {\n  return function morphdom2(fromNode, toNode, options) {\n    if (!options) {\n      options = {};\n    }\n    if (typeof toNode === \"string\") {\n      if (fromNode.nodeName === \"#document\" || fromNode.nodeName === \"HTML\" || fromNode.nodeName === \"BODY\") {\n        var toNodeHtml = toNode;\n        toNode = doc.createElement(\"html\");\n        toNode.innerHTML = toNodeHtml;\n      } else {\n        toNode = toElement(toNode);\n      }\n    }\n    var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n    var onNodeAdded = options.onNodeAdded || noop;\n    var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n    var onElUpdated = options.onElUpdated || noop;\n    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n    var onNodeDiscarded = options.onNodeDiscarded || noop;\n    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n    var childrenOnly = options.childrenOnly === true;\n    var fromNodesLookup = Object.create(null);\n    var keyedRemovalList = [];\n    function addKeyedRemoval(key) {\n      keyedRemovalList.push(key);\n    }\n    function walkDiscardedChildNodes(node, skipKeyedNodes) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n        while (curChild) {\n          var key = void 0;\n          if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n            addKeyedRemoval(key);\n          } else {\n            onNodeDiscarded(curChild);\n            if (curChild.firstChild) {\n              walkDiscardedChildNodes(curChild, skipKeyedNodes);\n            }\n          }\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n    function removeNode(node, parentNode, skipKeyedNodes) {\n      if (onBeforeNodeDiscarded(node) === false) {\n        return;\n      }\n      if (parentNode) {\n        parentNode.removeChild(node);\n      }\n      onNodeDiscarded(node);\n      walkDiscardedChildNodes(node, skipKeyedNodes);\n    }\n    function indexTree(node) {\n      if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n        var curChild = node.firstChild;\n        while (curChild) {\n          var key = getNodeKey(curChild);\n          if (key) {\n            fromNodesLookup[key] = curChild;\n          }\n          indexTree(curChild);\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n    indexTree(fromNode);\n    function handleNodeAdded(el) {\n      onNodeAdded(el);\n      var curChild = el.firstChild;\n      while (curChild) {\n        var nextSibling = curChild.nextSibling;\n        var key = getNodeKey(curChild);\n        if (key) {\n          var unmatchedFromEl = fromNodesLookup[key];\n          if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n            morphEl(unmatchedFromEl, curChild);\n          } else {\n            handleNodeAdded(curChild);\n          }\n        } else {\n          handleNodeAdded(curChild);\n        }\n        curChild = nextSibling;\n      }\n    }\n    function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n      while (curFromNodeChild) {\n        var fromNextSibling = curFromNodeChild.nextSibling;\n        if (curFromNodeKey = getNodeKey(curFromNodeChild)) {\n          addKeyedRemoval(curFromNodeKey);\n        } else {\n          removeNode(curFromNodeChild, fromEl, true);\n        }\n        curFromNodeChild = fromNextSibling;\n      }\n    }\n    function morphEl(fromEl, toEl, childrenOnly2) {\n      var toElKey = getNodeKey(toEl);\n      if (toElKey) {\n        delete fromNodesLookup[toElKey];\n      }\n      if (!childrenOnly2) {\n        if (onBeforeElUpdated(fromEl, toEl) === false) {\n          return;\n        }\n        morphAttrs2(fromEl, toEl);\n        onElUpdated(fromEl);\n        if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n          return;\n        }\n      }\n      if (fromEl.nodeName !== \"TEXTAREA\") {\n        morphChildren(fromEl, toEl);\n      } else {\n        specialElHandlers.TEXTAREA(fromEl, toEl);\n      }\n    }\n    function morphChildren(fromEl, toEl) {\n      var curToNodeChild = toEl.firstChild;\n      var curFromNodeChild = fromEl.firstChild;\n      var curToNodeKey;\n      var curFromNodeKey;\n      var fromNextSibling;\n      var toNextSibling;\n      var matchingFromEl;\n      outer:\n        while (curToNodeChild) {\n          toNextSibling = curToNodeChild.nextSibling;\n          curToNodeKey = getNodeKey(curToNodeChild);\n          while (curFromNodeChild) {\n            fromNextSibling = curFromNodeChild.nextSibling;\n            if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n              curToNodeChild = toNextSibling;\n              curFromNodeChild = fromNextSibling;\n              continue outer;\n            }\n            curFromNodeKey = getNodeKey(curFromNodeChild);\n            var curFromNodeType = curFromNodeChild.nodeType;\n            var isCompatible = void 0;\n            if (curFromNodeType === curToNodeChild.nodeType) {\n              if (curFromNodeType === ELEMENT_NODE) {\n                if (curToNodeKey) {\n                  if (curToNodeKey !== curFromNodeKey) {\n                    if (matchingFromEl = fromNodesLookup[curToNodeKey]) {\n                      if (fromNextSibling === matchingFromEl) {\n                        isCompatible = false;\n                      } else {\n                        fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n                        if (curFromNodeKey) {\n                          addKeyedRemoval(curFromNodeKey);\n                        } else {\n                          removeNode(curFromNodeChild, fromEl, true);\n                        }\n                        curFromNodeChild = matchingFromEl;\n                      }\n                    } else {\n                      isCompatible = false;\n                    }\n                  }\n                } else if (curFromNodeKey) {\n                  isCompatible = false;\n                }\n                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                if (isCompatible) {\n                  morphEl(curFromNodeChild, curToNodeChild);\n                }\n              } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                isCompatible = true;\n                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                  curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                }\n              }\n            }\n            if (isCompatible) {\n              curToNodeChild = toNextSibling;\n              curFromNodeChild = fromNextSibling;\n              continue outer;\n            }\n            if (curFromNodeKey) {\n              addKeyedRemoval(curFromNodeKey);\n            } else {\n              removeNode(curFromNodeChild, fromEl, true);\n            }\n            curFromNodeChild = fromNextSibling;\n          }\n          if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n            fromEl.appendChild(matchingFromEl);\n            morphEl(matchingFromEl, curToNodeChild);\n          } else {\n            var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n            if (onBeforeNodeAddedResult !== false) {\n              if (onBeforeNodeAddedResult) {\n                curToNodeChild = onBeforeNodeAddedResult;\n              }\n              if (curToNodeChild.actualize) {\n                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n              }\n              fromEl.appendChild(curToNodeChild);\n              handleNodeAdded(curToNodeChild);\n            }\n          }\n          curToNodeChild = toNextSibling;\n          curFromNodeChild = fromNextSibling;\n        }\n      cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n      var specialElHandler = specialElHandlers[fromEl.nodeName];\n      if (specialElHandler) {\n        specialElHandler(fromEl, toEl);\n      }\n    }\n    var morphedNode = fromNode;\n    var morphedNodeType = morphedNode.nodeType;\n    var toNodeType = toNode.nodeType;\n    if (!childrenOnly) {\n      if (morphedNodeType === ELEMENT_NODE) {\n        if (toNodeType === ELEMENT_NODE) {\n          if (!compareNodeNames(fromNode, toNode)) {\n            onNodeDiscarded(fromNode);\n            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n          }\n        } else {\n          morphedNode = toNode;\n        }\n      } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {\n        if (toNodeType === morphedNodeType) {\n          if (morphedNode.nodeValue !== toNode.nodeValue) {\n            morphedNode.nodeValue = toNode.nodeValue;\n          }\n          return morphedNode;\n        } else {\n          morphedNode = toNode;\n        }\n      }\n    }\n    if (morphedNode === toNode) {\n      onNodeDiscarded(fromNode);\n    } else {\n      if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n        return;\n      }\n      morphEl(morphedNode, toNode, childrenOnly);\n      if (keyedRemovalList) {\n        for (var i = 0, len = keyedRemovalList.length; i < len; i++) {\n          var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n          if (elToRemove) {\n            removeNode(elToRemove, elToRemove.parentNode, false);\n          }\n        }\n      }\n    }\n    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n      if (morphedNode.actualize) {\n        morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n      }\n      fromNode.parentNode.replaceChild(morphedNode, fromNode);\n    }\n    return morphedNode;\n  };\n}\nvar morphdom = morphdomFactory(morphAttrs);\nvar morphdom_esm_default = morphdom;\n\n// js/phoenix_live_view/dom_patch.js\nvar DOMPatch = class {\n  static patchEl(fromEl, toEl, activeElement) {\n    morphdom_esm_default(fromEl, toEl, {\n      childrenOnly: false,\n      onBeforeElUpdated: (fromEl2, toEl2) => {\n        if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {\n          dom_default.mergeFocusedInput(fromEl2, toEl2);\n          return false;\n        }\n      }\n    });\n  }\n  constructor(view, container, id, html, targetCID) {\n    this.view = view;\n    this.liveSocket = view.liveSocket;\n    this.container = container;\n    this.id = id;\n    this.rootID = view.root.id;\n    this.html = html;\n    this.targetCID = targetCID;\n    this.cidPatch = isCid(this.targetCID);\n    this.callbacks = {\n      beforeadded: [],\n      beforeupdated: [],\n      beforephxChildAdded: [],\n      afteradded: [],\n      afterupdated: [],\n      afterdiscarded: [],\n      afterphxChildAdded: [],\n      aftertransitionsDiscarded: []\n    };\n  }\n  before(kind, callback) {\n    this.callbacks[`before${kind}`].push(callback);\n  }\n  after(kind, callback) {\n    this.callbacks[`after${kind}`].push(callback);\n  }\n  trackBefore(kind, ...args) {\n    this.callbacks[`before${kind}`].forEach((callback) => callback(...args));\n  }\n  trackAfter(kind, ...args) {\n    this.callbacks[`after${kind}`].forEach((callback) => callback(...args));\n  }\n  markPrunableContentForRemoval() {\n    dom_default.all(this.container, \"[phx-update=append] > *, [phx-update=prepend] > *\", (el) => {\n      el.setAttribute(PHX_PRUNE, \"\");\n    });\n  }\n  perform() {\n    let { view, liveSocket, container, html } = this;\n    let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;\n    if (this.isCIDPatch() && !targetContainer) {\n      return;\n    }\n    let focused = liveSocket.getActiveElement();\n    let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};\n    let phxUpdate = liveSocket.binding(PHX_UPDATE);\n    let phxFeedbackFor = liveSocket.binding(PHX_FEEDBACK_FOR);\n    let disableWith = liveSocket.binding(PHX_DISABLE_WITH);\n    let phxTriggerExternal = liveSocket.binding(PHX_TRIGGER_ACTION);\n    let phxRemove = liveSocket.binding(\"remove\");\n    let added = [];\n    let updates = [];\n    let appendPrependUpdates = [];\n    let pendingRemoves = [];\n    let externalFormTriggered = null;\n    let diffHTML = liveSocket.time(\"premorph container prep\", () => {\n      return this.buildDiffHTML(container, html, phxUpdate, targetContainer);\n    });\n    this.trackBefore(\"added\", container);\n    this.trackBefore(\"updated\", container, container);\n    liveSocket.time(\"morphdom\", () => {\n      morphdom_esm_default(targetContainer, diffHTML, {\n        childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,\n        getNodeKey: (node) => {\n          return dom_default.isPhxDestroyed(node) ? null : node.id;\n        },\n        onBeforeNodeAdded: (el) => {\n          this.trackBefore(\"added\", el);\n          return el;\n        },\n        onNodeAdded: (el) => {\n          if (el instanceof HTMLImageElement && el.srcset) {\n            el.srcset = el.srcset;\n          } else if (el instanceof HTMLVideoElement && el.autoplay) {\n            el.play();\n          }\n          if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {\n            externalFormTriggered = el;\n          }\n          dom_default.discardError(targetContainer, el, phxFeedbackFor);\n          if (dom_default.isPhxChild(el) && view.ownsElement(el)) {\n            this.trackAfter(\"phxChildAdded\", el);\n          }\n          added.push(el);\n        },\n        onNodeDiscarded: (el) => {\n          if (dom_default.isPhxChild(el)) {\n            liveSocket.destroyViewByEl(el);\n          }\n          this.trackAfter(\"discarded\", el);\n        },\n        onBeforeNodeDiscarded: (el) => {\n          if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {\n            return true;\n          }\n          if (el.parentNode !== null && dom_default.isPhxUpdate(el.parentNode, phxUpdate, [\"append\", \"prepend\"]) && el.id) {\n            return false;\n          }\n          if (el.getAttribute && el.getAttribute(phxRemove)) {\n            pendingRemoves.push(el);\n            return false;\n          }\n          if (this.skipCIDSibling(el)) {\n            return false;\n          }\n          return true;\n        },\n        onElUpdated: (el) => {\n          if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {\n            externalFormTriggered = el;\n          }\n          updates.push(el);\n        },\n        onBeforeElUpdated: (fromEl, toEl) => {\n          dom_default.cleanChildNodes(toEl, phxUpdate);\n          if (this.skipCIDSibling(toEl)) {\n            return false;\n          }\n          if (dom_default.isIgnored(fromEl, phxUpdate)) {\n            this.trackBefore(\"updated\", fromEl, toEl);\n            dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });\n            updates.push(fromEl);\n            dom_default.applyStickyOperations(fromEl);\n            return false;\n          }\n          if (fromEl.type === \"number\" && (fromEl.validity && fromEl.validity.badInput)) {\n            return false;\n          }\n          if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {\n            if (dom_default.isUploadInput(fromEl)) {\n              this.trackBefore(\"updated\", fromEl, toEl);\n              updates.push(fromEl);\n            }\n            dom_default.applyStickyOperations(fromEl);\n            return false;\n          }\n          if (dom_default.isPhxChild(toEl)) {\n            let prevSession = fromEl.getAttribute(PHX_SESSION);\n            dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });\n            if (prevSession !== \"\") {\n              fromEl.setAttribute(PHX_SESSION, prevSession);\n            }\n            fromEl.setAttribute(PHX_ROOT_ID, this.rootID);\n            dom_default.applyStickyOperations(fromEl);\n            return false;\n          }\n          dom_default.copyPrivates(toEl, fromEl);\n          dom_default.discardError(targetContainer, toEl, phxFeedbackFor);\n          let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);\n          if (isFocusedFormEl) {\n            this.trackBefore(\"updated\", fromEl, toEl);\n            dom_default.mergeFocusedInput(fromEl, toEl);\n            dom_default.syncAttrsToProps(fromEl);\n            updates.push(fromEl);\n            dom_default.applyStickyOperations(fromEl);\n            return false;\n          } else {\n            if (dom_default.isPhxUpdate(toEl, phxUpdate, [\"append\", \"prepend\"])) {\n              appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));\n            }\n            dom_default.syncAttrsToProps(toEl);\n            dom_default.applyStickyOperations(toEl);\n            this.trackBefore(\"updated\", fromEl, toEl);\n            return true;\n          }\n        }\n      });\n    });\n    if (liveSocket.isDebugEnabled()) {\n      detectDuplicateIds();\n    }\n    if (appendPrependUpdates.length > 0) {\n      liveSocket.time(\"post-morph append/prepend restoration\", () => {\n        appendPrependUpdates.forEach((update) => update.perform());\n      });\n    }\n    liveSocket.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));\n    dom_default.dispatchEvent(document, \"phx:update\");\n    added.forEach((el) => this.trackAfter(\"added\", el));\n    updates.forEach((el) => this.trackAfter(\"updated\", el));\n    if (pendingRemoves.length > 0) {\n      liveSocket.transitionRemoves(pendingRemoves);\n      liveSocket.requestDOMUpdate(() => {\n        pendingRemoves.forEach((el) => {\n          let child = dom_default.firstPhxChild(el);\n          if (child) {\n            liveSocket.destroyViewByEl(child);\n          }\n          el.remove();\n        });\n        this.trackAfter(\"transitionsDiscarded\", pendingRemoves);\n      });\n    }\n    if (externalFormTriggered) {\n      liveSocket.disconnect();\n      externalFormTriggered.submit();\n    }\n    return true;\n  }\n  isCIDPatch() {\n    return this.cidPatch;\n  }\n  skipCIDSibling(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;\n  }\n  targetCIDContainer(html) {\n    if (!this.isCIDPatch()) {\n      return;\n    }\n    let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);\n    if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {\n      return first;\n    } else {\n      return first && first.parentNode;\n    }\n  }\n  buildDiffHTML(container, html, phxUpdate, targetContainer) {\n    let isCIDPatch = this.isCIDPatch();\n    let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();\n    if (!isCIDPatch || isCIDWithSingleRoot) {\n      return html;\n    } else {\n      let diffContainer = null;\n      let template = document.createElement(\"template\");\n      diffContainer = dom_default.cloneNode(targetContainer);\n      let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);\n      template.innerHTML = html;\n      rest.forEach((el) => el.remove());\n      Array.from(diffContainer.childNodes).forEach((child) => {\n        if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {\n          child.setAttribute(PHX_SKIP, \"\");\n          child.innerHTML = \"\";\n        }\n      });\n      Array.from(template.content.childNodes).forEach((el) => diffContainer.insertBefore(el, firstComponent));\n      firstComponent.remove();\n      return diffContainer.outerHTML;\n    }\n  }\n};\n\n// js/phoenix_live_view/rendered.js\nvar Rendered = class {\n  static extract(diff) {\n    let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;\n    delete diff[REPLY];\n    delete diff[EVENTS];\n    delete diff[TITLE];\n    return { diff, title, reply: reply || null, events: events || [] };\n  }\n  constructor(viewId, rendered) {\n    this.viewId = viewId;\n    this.rendered = {};\n    this.mergeDiff(rendered);\n  }\n  parentViewId() {\n    return this.viewId;\n  }\n  toString(onlyCids) {\n    return this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);\n  }\n  recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {\n    onlyCids = onlyCids ? new Set(onlyCids) : null;\n    let output = { buffer: \"\", components, onlyCids };\n    this.toOutputBuffer(rendered, null, output);\n    return output.buffer;\n  }\n  componentCIDs(diff) {\n    return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));\n  }\n  isComponentOnlyDiff(diff) {\n    if (!diff[COMPONENTS]) {\n      return false;\n    }\n    return Object.keys(diff).length === 1;\n  }\n  getComponent(diff, cid) {\n    return diff[COMPONENTS][cid];\n  }\n  mergeDiff(diff) {\n    let newc = diff[COMPONENTS];\n    let cache = {};\n    delete diff[COMPONENTS];\n    this.rendered = this.mutableMerge(this.rendered, diff);\n    this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};\n    if (newc) {\n      let oldc = this.rendered[COMPONENTS];\n      for (let cid in newc) {\n        newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);\n      }\n      for (let cid in newc) {\n        oldc[cid] = newc[cid];\n      }\n      diff[COMPONENTS] = newc;\n    }\n  }\n  cachedFindComponent(cid, cdiff, oldc, newc, cache) {\n    if (cache[cid]) {\n      return cache[cid];\n    } else {\n      let ndiff, stat, scid = cdiff[STATIC];\n      if (isCid(scid)) {\n        let tdiff;\n        if (scid > 0) {\n          tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);\n        } else {\n          tdiff = oldc[-scid];\n        }\n        stat = tdiff[STATIC];\n        ndiff = this.cloneMerge(tdiff, cdiff);\n        ndiff[STATIC] = stat;\n      } else {\n        ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);\n      }\n      cache[cid] = ndiff;\n      return ndiff;\n    }\n  }\n  mutableMerge(target, source) {\n    if (source[STATIC] !== void 0) {\n      return source;\n    } else {\n      this.doMutableMerge(target, source);\n      return target;\n    }\n  }\n  doMutableMerge(target, source) {\n    for (let key in source) {\n      let val = source[key];\n      let targetVal = target[key];\n      if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {\n        this.doMutableMerge(targetVal, val);\n      } else {\n        target[key] = val;\n      }\n    }\n  }\n  cloneMerge(target, source) {\n    let merged = { ...target, ...source };\n    for (let key in merged) {\n      let val = source[key];\n      let targetVal = target[key];\n      if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {\n        merged[key] = this.cloneMerge(targetVal, val);\n      }\n    }\n    return merged;\n  }\n  componentToString(cid) {\n    return this.recursiveCIDToString(this.rendered[COMPONENTS], cid);\n  }\n  pruneCIDs(cids) {\n    cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);\n  }\n  get() {\n    return this.rendered;\n  }\n  isNewFingerprint(diff = {}) {\n    return !!diff[STATIC];\n  }\n  templateStatic(part, templates) {\n    if (typeof part === \"number\") {\n      return templates[part];\n    } else {\n      return part;\n    }\n  }\n  toOutputBuffer(rendered, templates, output) {\n    if (rendered[DYNAMICS]) {\n      return this.comprehensionToBuffer(rendered, templates, output);\n    }\n    let { [STATIC]: statics } = rendered;\n    statics = this.templateStatic(statics, templates);\n    output.buffer += statics[0];\n    for (let i = 1; i < statics.length; i++) {\n      this.dynamicToBuffer(rendered[i - 1], templates, output);\n      output.buffer += statics[i];\n    }\n  }\n  comprehensionToBuffer(rendered, templates, output) {\n    let { [DYNAMICS]: dynamics, [STATIC]: statics } = rendered;\n    statics = this.templateStatic(statics, templates);\n    let compTemplates = rendered[TEMPLATES];\n    for (let d = 0; d < dynamics.length; d++) {\n      let dynamic = dynamics[d];\n      output.buffer += statics[0];\n      for (let i = 1; i < statics.length; i++) {\n        this.dynamicToBuffer(dynamic[i - 1], compTemplates, output);\n        output.buffer += statics[i];\n      }\n    }\n  }\n  dynamicToBuffer(rendered, templates, output) {\n    if (typeof rendered === \"number\") {\n      output.buffer += this.recursiveCIDToString(output.components, rendered, output.onlyCids);\n    } else if (isObject(rendered)) {\n      this.toOutputBuffer(rendered, templates, output);\n    } else {\n      output.buffer += rendered;\n    }\n  }\n  recursiveCIDToString(components, cid, onlyCids) {\n    let component = components[cid] || logError(`no component for CID ${cid}`, components);\n    let template = document.createElement(\"template\");\n    template.innerHTML = this.recursiveToString(component, components, onlyCids);\n    let container = template.content;\n    let skip = onlyCids && !onlyCids.has(cid);\n    let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i) => {\n      if (child.nodeType === Node.ELEMENT_NODE) {\n        if (child.getAttribute(PHX_COMPONENT)) {\n          return [hasNodes, true];\n        }\n        child.setAttribute(PHX_COMPONENT, cid);\n        if (!child.id) {\n          child.id = `${this.parentViewId()}-${cid}-${i}`;\n        }\n        if (skip) {\n          child.setAttribute(PHX_SKIP, \"\");\n          child.innerHTML = \"\";\n        }\n        return [true, hasComponents];\n      } else {\n        if (child.nodeValue.trim() !== \"\") {\n          logError(`only HTML element tags are allowed at the root of components.\n\ngot: \"${child.nodeValue.trim()}\"\n\nwithin:\n`, template.innerHTML.trim());\n          child.replaceWith(this.createSpan(child.nodeValue, cid));\n          return [true, hasComponents];\n        } else {\n          child.remove();\n          return [hasNodes, hasComponents];\n        }\n      }\n    }, [false, false]);\n    if (!hasChildNodes && !hasChildComponents) {\n      logError(\"expected at least one HTML element tag inside a component, but the component is empty:\\n\", template.innerHTML.trim());\n      return this.createSpan(\"\", cid).outerHTML;\n    } else if (!hasChildNodes && hasChildComponents) {\n      logError(\"expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.\", template.innerHTML.trim());\n      return template.innerHTML;\n    } else {\n      return template.innerHTML;\n    }\n  }\n  createSpan(text, cid) {\n    let span = document.createElement(\"span\");\n    span.innerText = text;\n    span.setAttribute(PHX_COMPONENT, cid);\n    return span;\n  }\n};\n\n// js/phoenix_live_view/view_hook.js\nvar viewHookID = 1;\nvar ViewHook = class {\n  static makeID() {\n    return viewHookID++;\n  }\n  static elementID(el) {\n    return el.phxHookId;\n  }\n  constructor(view, el, callbacks) {\n    this.__view = view;\n    this.__liveSocket = view.liveSocket;\n    this.__callbacks = callbacks;\n    this.__listeners = new Set();\n    this.__isDisconnected = false;\n    this.el = el;\n    this.el.phxHookId = this.constructor.makeID();\n    for (let key in this.__callbacks) {\n      this[key] = this.__callbacks[key];\n    }\n  }\n  __mounted() {\n    this.mounted && this.mounted();\n  }\n  __updated() {\n    this.updated && this.updated();\n  }\n  __beforeUpdate() {\n    this.beforeUpdate && this.beforeUpdate();\n  }\n  __destroyed() {\n    this.destroyed && this.destroyed();\n  }\n  __reconnected() {\n    if (this.__isDisconnected) {\n      this.__isDisconnected = false;\n      this.reconnected && this.reconnected();\n    }\n  }\n  __disconnected() {\n    this.__isDisconnected = true;\n    this.disconnected && this.disconnected();\n  }\n  pushEvent(event, payload = {}, onReply = function() {\n  }) {\n    return this.__view.pushHookEvent(null, event, payload, onReply);\n  }\n  pushEventTo(phxTarget, event, payload = {}, onReply = function() {\n  }) {\n    return this.__view.withinTargets(phxTarget, (view, targetCtx) => {\n      return view.pushHookEvent(targetCtx, event, payload, onReply);\n    });\n  }\n  handleEvent(event, callback) {\n    let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);\n    window.addEventListener(`phx:${event}`, callbackRef);\n    this.__listeners.add(callbackRef);\n    return callbackRef;\n  }\n  removeHandleEvent(callbackRef) {\n    let event = callbackRef(null, true);\n    window.removeEventListener(`phx:${event}`, callbackRef);\n    this.__listeners.delete(callbackRef);\n  }\n  upload(name, files) {\n    return this.__view.dispatchUploads(name, files);\n  }\n  uploadTo(phxTarget, name, files) {\n    return this.__view.withinTargets(phxTarget, (view) => view.dispatchUploads(name, files));\n  }\n  __cleanup__() {\n    this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));\n  }\n};\n\n// js/phoenix_live_view/js.js\nvar JS = {\n  exec(eventType, phxEvent, view, el, defaults) {\n    let [defaultKind, defaultArgs] = defaults || [null, {}];\n    let commands = phxEvent.charAt(0) === \"[\" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];\n    commands.forEach(([kind, args]) => {\n      if (kind === defaultKind && defaultArgs.data) {\n        args.data = Object.assign(args.data || {}, defaultArgs.data);\n      }\n      this[`exec_${kind}`](eventType, phxEvent, view, el, args);\n    });\n  },\n  isVisible(el) {\n    let style = window.getComputedStyle(el);\n    return !(style.opacity === 0 || style.display === \"none\");\n  },\n  exec_dispatch(eventType, phxEvent, view, sourceEl, { to, event, detail }) {\n    if (to) {\n      dom_default.all(document, to, (el) => dom_default.dispatchEvent(el, event, detail));\n    } else {\n      dom_default.dispatchEvent(sourceEl, event, detail);\n    }\n  },\n  exec_push(eventType, phxEvent, view, sourceEl, args) {\n    let { event, data, target, page_loading, loading, value } = args;\n    let pushOpts = { page_loading: !!page_loading, loading, value };\n    let targetSrc = eventType === \"change\" ? sourceEl.form : sourceEl;\n    let phxTarget = target || targetSrc.getAttribute(view.binding(\"target\")) || targetSrc;\n    view.withinTargets(phxTarget, (targetView, targetCtx) => {\n      if (eventType === \"change\") {\n        let { newCid, _target, callback } = args;\n        if (_target) {\n          pushOpts._target = _target;\n        }\n        targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);\n      } else if (eventType === \"submit\") {\n        targetView.submitForm(sourceEl, targetCtx, event || phxEvent, pushOpts);\n      } else {\n        targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data, pushOpts);\n      }\n    });\n  },\n  exec_add_class(eventType, phxEvent, view, sourceEl, { to, names, transition, time }) {\n    if (to) {\n      dom_default.all(document, to, (el) => this.addOrRemoveClasses(el, names, [], transition, time, view));\n    } else {\n      this.addOrRemoveClasses(sourceEl, names, [], transition, view);\n    }\n  },\n  exec_remove_class(eventType, phxEvent, view, sourceEl, { to, names, transition, time }) {\n    if (to) {\n      dom_default.all(document, to, (el) => this.addOrRemoveClasses(el, [], names, transition, time, view));\n    } else {\n      this.addOrRemoveClasses(sourceEl, [], names, transition, time, view);\n    }\n  },\n  exec_transition(eventType, phxEvent, view, sourceEl, { time, to, transition }) {\n    let els = to ? dom_default.all(document, to) : [sourceEl];\n    let [transition_start, running, transition_end] = transition;\n    els.forEach((el) => {\n      let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(running), []);\n      let onDone = () => this.addOrRemoveClasses(el, transition_end, transition_start.concat(running));\n      view.transition(time, onStart, onDone);\n    });\n  },\n  exec_toggle(eventType, phxEvent, view, sourceEl, { to, display, ins, outs, time }) {\n    if (to) {\n      dom_default.all(document, to, (el) => this.toggle(eventType, view, el, display, ins, outs, time));\n    } else {\n      this.toggle(eventType, view, sourceEl, display, ins, outs, time);\n    }\n  },\n  exec_show(eventType, phxEvent, view, sourceEl, { to, display, transition, time }) {\n    if (to) {\n      dom_default.all(document, to, (el) => this.show(eventType, view, el, display, transition, time));\n    } else {\n      this.show(eventType, view, sourceEl, transition, time);\n    }\n  },\n  exec_hide(eventType, phxEvent, view, sourceEl, { to, display, transition, time }) {\n    if (to) {\n      dom_default.all(document, to, (el) => this.hide(eventType, view, el, display, transition, time));\n    } else {\n      this.hide(eventType, view, sourceEl, display, transition, time);\n    }\n  },\n  show(eventType, view, el, display, transition, time) {\n    if (!this.isVisible(el)) {\n      this.toggle(eventType, view, el, display, transition, null, time);\n    }\n  },\n  hide(eventType, view, el, display, transition, time) {\n    if (this.isVisible(el)) {\n      this.toggle(eventType, view, el, display, null, transition, time);\n    }\n  },\n  toggle(eventType, view, el, display, ins, outs, time) {\n    let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];\n    let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];\n    if (inClasses.length > 0 || outClasses.length > 0) {\n      if (this.isVisible(el)) {\n        let onStart = () => {\n          this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));\n          window.requestAnimationFrame(() => {\n            this.addOrRemoveClasses(el, outClasses, []);\n            window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));\n          });\n        };\n        view.transition(time, onStart, () => {\n          this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));\n          dom_default.putSticky(el, \"toggle\", (currentEl) => currentEl.style.display = \"none\");\n        });\n      } else {\n        if (eventType === \"remove\") {\n          return;\n        }\n        let onStart = () => {\n          this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));\n          dom_default.putSticky(el, \"toggle\", (currentEl) => currentEl.style.display = display || \"block\");\n          window.requestAnimationFrame(() => {\n            this.addOrRemoveClasses(el, inClasses, []);\n            window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));\n          });\n        };\n        view.transition(time, onStart, () => {\n          this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));\n        });\n      }\n    } else {\n      let newDisplay = this.isVisible(el) ? \"none\" : display || \"block\";\n      dom_default.putSticky(el, \"toggle\", (currentEl) => currentEl.style.display = newDisplay);\n    }\n  },\n  addOrRemoveClasses(el, adds, removes, transition, time, view) {\n    let [transition_run, transition_start, transition_end] = transition || [[], [], []];\n    if (transition_run.length > 0) {\n      let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(transition_run), []);\n      let onDone = () => this.addOrRemoveClasses(el, adds.concat(transition_end), removes.concat(transition_run).concat(transition_start));\n      return view.transition(time, onStart, onDone);\n    }\n    window.requestAnimationFrame(() => {\n      let [prevAdds, prevRemoves] = dom_default.getSticky(el, \"classes\", [[], []]);\n      let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));\n      let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));\n      let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);\n      let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);\n      dom_default.putSticky(el, \"classes\", (currentEl) => {\n        currentEl.classList.remove(...newRemoves);\n        currentEl.classList.add(...newAdds);\n        return [newAdds, newRemoves];\n      });\n    });\n  },\n  hasAllClasses(el, classes) {\n    return classes.every((name) => el.classList.contains(name));\n  },\n  isToggledOut(el, outClasses) {\n    return !this.isVisible(el) || this.hasAllClasses(el, outClasses);\n  }\n};\nvar js_default = JS;\n\n// js/phoenix_live_view/view.js\nvar serializeForm = (form, meta = {}) => {\n  let formData = new FormData(form);\n  let toRemove = [];\n  formData.forEach((val, key, _index) => {\n    if (val instanceof File) {\n      toRemove.push(key);\n    }\n  });\n  toRemove.forEach((key) => formData.delete(key));\n  let params = new URLSearchParams();\n  for (let [key, val] of formData.entries()) {\n    params.append(key, val);\n  }\n  for (let metaKey in meta) {\n    params.append(metaKey, meta[metaKey]);\n  }\n  return params.toString();\n};\nvar View = class {\n  constructor(el, liveSocket, parentView, flash) {\n    this.liveSocket = liveSocket;\n    this.flash = flash;\n    this.parent = parentView;\n    this.root = parentView ? parentView.root : this;\n    this.el = el;\n    this.id = this.el.id;\n    this.ref = 0;\n    this.childJoins = 0;\n    this.loaderTimer = null;\n    this.pendingDiffs = [];\n    this.pruningCIDs = [];\n    this.redirect = false;\n    this.href = null;\n    this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;\n    this.joinPending = true;\n    this.destroyed = false;\n    this.joinCallback = function(onDone) {\n      onDone && onDone();\n    };\n    this.stopCallback = function() {\n    };\n    this.pendingJoinOps = this.parent ? null : [];\n    this.viewHooks = {};\n    this.uploaders = {};\n    this.formSubmits = [];\n    this.children = this.parent ? null : {};\n    this.root.children[this.id] = {};\n    this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {\n      return {\n        redirect: this.redirect ? this.href : void 0,\n        url: this.redirect ? void 0 : this.href || void 0,\n        params: this.connectParams(),\n        session: this.getSession(),\n        static: this.getStatic(),\n        flash: this.flash\n      };\n    });\n    this.showLoader(this.liveSocket.loaderTimeout);\n    this.bindChannel();\n  }\n  setHref(href) {\n    this.href = href;\n  }\n  setRedirect(href) {\n    this.redirect = true;\n    this.href = href;\n  }\n  isMain() {\n    return this.liveSocket.main === this;\n  }\n  connectParams() {\n    let params = this.liveSocket.params(this.el);\n    let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === \"string\");\n    if (manifest.length > 0) {\n      params[\"_track_static\"] = manifest;\n    }\n    params[\"_mounts\"] = this.joinCount;\n    return params;\n  }\n  isConnected() {\n    return this.channel.canPush();\n  }\n  getSession() {\n    return this.el.getAttribute(PHX_SESSION);\n  }\n  getStatic() {\n    let val = this.el.getAttribute(PHX_STATIC);\n    return val === \"\" ? null : val;\n  }\n  destroy(callback = function() {\n  }) {\n    this.destroyAllChildren();\n    this.destroyed = true;\n    delete this.root.children[this.id];\n    if (this.parent) {\n      delete this.root.children[this.parent.id][this.id];\n    }\n    clearTimeout(this.loaderTimer);\n    let onFinished = () => {\n      callback();\n      for (let id in this.viewHooks) {\n        this.destroyHook(this.viewHooks[id]);\n      }\n    };\n    dom_default.markPhxChildDestroyed(this.el);\n    this.log(\"destroyed\", () => [\"the child has been removed from the parent\"]);\n    this.channel.leave().receive(\"ok\", onFinished).receive(\"error\", onFinished).receive(\"timeout\", onFinished);\n  }\n  setContainerClasses(...classes) {\n    this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);\n    this.el.classList.add(...classes);\n  }\n  showLoader(timeout) {\n    clearTimeout(this.loaderTimer);\n    if (timeout) {\n      this.loaderTimer = setTimeout(() => this.showLoader(), timeout);\n    } else {\n      for (let id in this.viewHooks) {\n        this.viewHooks[id].__disconnected();\n      }\n      this.setContainerClasses(PHX_DISCONNECTED_CLASS);\n    }\n  }\n  hideLoader() {\n    clearTimeout(this.loaderTimer);\n    this.setContainerClasses(PHX_CONNECTED_CLASS);\n  }\n  triggerReconnected() {\n    for (let id in this.viewHooks) {\n      this.viewHooks[id].__reconnected();\n    }\n  }\n  log(kind, msgCallback) {\n    this.liveSocket.log(this, kind, msgCallback);\n  }\n  transition(time, onStart, onDone = function() {\n  }) {\n    this.liveSocket.transition(time, onStart, onDone);\n  }\n  withinTargets(phxTarget, callback) {\n    if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {\n      return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));\n    }\n    if (isCid(phxTarget)) {\n      let targets = dom_default.findComponentNodeList(this.el, phxTarget);\n      if (targets.length === 0) {\n        logError(`no component found matching phx-target of ${phxTarget}`);\n      } else {\n        callback(this, parseInt(phxTarget));\n      }\n    } else {\n      let targets = Array.from(document.querySelectorAll(phxTarget));\n      if (targets.length === 0) {\n        logError(`nothing found matching the phx-target selector \"${phxTarget}\"`);\n      }\n      targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));\n    }\n  }\n  applyDiff(type, rawDiff, callback) {\n    this.log(type, () => [\"\", clone(rawDiff)]);\n    let { diff, reply, events, title } = Rendered.extract(rawDiff);\n    if (title) {\n      dom_default.putTitle(title);\n    }\n    callback({ diff, reply, events });\n    return reply;\n  }\n  onJoin(resp) {\n    let { rendered, container } = resp;\n    if (container) {\n      let [tag, attrs] = container;\n      this.el = dom_default.replaceRootContainer(this.el, tag, attrs);\n    }\n    this.childJoins = 0;\n    this.joinPending = true;\n    this.flash = null;\n    browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);\n    this.applyDiff(\"mount\", rendered, ({ diff, events }) => {\n      this.rendered = new Rendered(this.id, diff);\n      let html = this.renderContainer(null, \"join\");\n      this.dropPendingRefs();\n      let forms = this.formsForRecovery(html);\n      this.joinCount++;\n      if (forms.length > 0) {\n        forms.forEach(([form, newForm, newCid], i) => {\n          this.pushFormRecovery(form, newCid, (resp2) => {\n            if (i === forms.length - 1) {\n              this.onJoinComplete(resp2, html, events);\n            }\n          });\n        });\n      } else {\n        this.onJoinComplete(resp, html, events);\n      }\n    });\n  }\n  dropPendingRefs() {\n    dom_default.all(this.el, `[${PHX_REF}]`, (el) => el.removeAttribute(PHX_REF));\n  }\n  onJoinComplete({ live_patch }, html, events) {\n    if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {\n      return this.applyJoinPatch(live_patch, html, events);\n    }\n    let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {\n      let fromEl = toEl.id && this.el.querySelector(`[id=\"${toEl.id}\"]`);\n      let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);\n      if (phxStatic) {\n        toEl.setAttribute(PHX_STATIC, phxStatic);\n      }\n      return this.joinChild(toEl);\n    });\n    if (newChildren.length === 0) {\n      if (this.parent) {\n        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);\n        this.parent.ackJoin(this);\n      } else {\n        this.onAllChildJoinsComplete();\n        this.applyJoinPatch(live_patch, html, events);\n      }\n    } else {\n      this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);\n    }\n  }\n  attachTrueDocEl() {\n    this.el = dom_default.byId(this.id);\n    this.el.setAttribute(PHX_ROOT_ID, this.root.id);\n  }\n  applyJoinPatch(live_patch, html, events) {\n    this.attachTrueDocEl();\n    let patch = new DOMPatch(this, this.el, this.id, html, null);\n    patch.markPrunableContentForRemoval();\n    this.performPatch(patch, false);\n    this.joinNewChildren();\n    dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {\n      let hook = this.addHook(hookEl);\n      if (hook) {\n        hook.__mounted();\n      }\n    });\n    this.joinPending = false;\n    this.liveSocket.dispatchEvents(events);\n    this.applyPendingUpdates();\n    if (live_patch) {\n      let { kind, to } = live_patch;\n      this.liveSocket.historyPatch(to, kind);\n    }\n    this.hideLoader();\n    if (this.joinCount > 1) {\n      this.triggerReconnected();\n    }\n    this.stopCallback();\n  }\n  triggerBeforeUpdateHook(fromEl, toEl) {\n    this.liveSocket.triggerDOM(\"onBeforeElUpdated\", [fromEl, toEl]);\n    let hook = this.getHook(fromEl);\n    let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));\n    if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {\n      hook.__beforeUpdate();\n      return hook;\n    }\n  }\n  performPatch(patch, pruneCids) {\n    let removedEls = [];\n    let phxChildrenAdded = false;\n    let updatedHookIds = new Set();\n    patch.after(\"added\", (el) => {\n      this.liveSocket.triggerDOM(\"onNodeAdded\", [el]);\n      let newHook = this.addHook(el);\n      if (newHook) {\n        newHook.__mounted();\n      }\n    });\n    patch.after(\"phxChildAdded\", (_el) => phxChildrenAdded = true);\n    patch.before(\"updated\", (fromEl, toEl) => {\n      let hook = this.triggerBeforeUpdateHook(fromEl, toEl);\n      if (hook) {\n        updatedHookIds.add(fromEl.id);\n      }\n    });\n    patch.after(\"updated\", (el) => {\n      if (updatedHookIds.has(el.id)) {\n        this.getHook(el).__updated();\n      }\n    });\n    patch.after(\"discarded\", (el) => {\n      if (el.nodeType === Node.ELEMENT_NODE) {\n        removedEls.push(el);\n      }\n    });\n    patch.after(\"transitionsDiscarded\", (els) => this.afterElementsRemoved(els, pruneCids));\n    patch.perform();\n    this.afterElementsRemoved(removedEls, pruneCids);\n    return phxChildrenAdded;\n  }\n  afterElementsRemoved(elements, pruneCids) {\n    let destroyedCIDs = [];\n    elements.forEach((parent) => {\n      let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);\n      components.concat(parent).forEach((el) => {\n        let cid = this.componentID(el);\n        if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {\n          destroyedCIDs.push(cid);\n        }\n        let hook = this.getHook(el);\n        hook && this.destroyHook(hook);\n      });\n    });\n    if (pruneCids) {\n      this.maybePushComponentsDestroyed(destroyedCIDs);\n    }\n  }\n  joinNewChildren() {\n    dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));\n  }\n  getChildById(id) {\n    return this.root.children[this.id][id];\n  }\n  getDescendentByEl(el) {\n    if (el.id === this.id) {\n      return this;\n    } else {\n      return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];\n    }\n  }\n  destroyDescendent(id) {\n    for (let parentId in this.root.children) {\n      for (let childId in this.root.children[parentId]) {\n        if (childId === id) {\n          return this.root.children[parentId][childId].destroy();\n        }\n      }\n    }\n  }\n  joinChild(el) {\n    let child = this.getChildById(el.id);\n    if (!child) {\n      let view = new View(el, this.liveSocket, this);\n      this.root.children[this.id][view.id] = view;\n      view.join();\n      this.childJoins++;\n      return true;\n    }\n  }\n  isJoinPending() {\n    return this.joinPending;\n  }\n  ackJoin(_child) {\n    this.childJoins--;\n    if (this.childJoins === 0) {\n      if (this.parent) {\n        this.parent.ackJoin(this);\n      } else {\n        this.onAllChildJoinsComplete();\n      }\n    }\n  }\n  onAllChildJoinsComplete() {\n    this.joinCallback(() => {\n      this.pendingJoinOps.forEach(([view, op]) => {\n        if (!view.isDestroyed()) {\n          op();\n        }\n      });\n      this.pendingJoinOps = [];\n    });\n  }\n  update(diff, events) {\n    if (this.isJoinPending() || this.liveSocket.hasPendingLink()) {\n      return this.pendingDiffs.push({ diff, events });\n    }\n    this.rendered.mergeDiff(diff);\n    let phxChildrenAdded = false;\n    if (this.rendered.isComponentOnlyDiff(diff)) {\n      this.liveSocket.time(\"component patch complete\", () => {\n        let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));\n        parentCids.forEach((parentCID) => {\n          if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {\n            phxChildrenAdded = true;\n          }\n        });\n      });\n    } else if (!isEmpty(diff)) {\n      this.liveSocket.time(\"full patch complete\", () => {\n        let html = this.renderContainer(diff, \"update\");\n        let patch = new DOMPatch(this, this.el, this.id, html, null);\n        phxChildrenAdded = this.performPatch(patch, true);\n      });\n    }\n    this.liveSocket.dispatchEvents(events);\n    if (phxChildrenAdded) {\n      this.joinNewChildren();\n    }\n  }\n  renderContainer(diff, kind) {\n    return this.liveSocket.time(`toString diff (${kind})`, () => {\n      let tag = this.el.tagName;\n      let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;\n      let html = this.rendered.toString(cids);\n      return `<${tag}>${html}</${tag}>`;\n    });\n  }\n  componentPatch(diff, cid) {\n    if (isEmpty(diff))\n      return false;\n    let html = this.rendered.componentToString(cid);\n    let patch = new DOMPatch(this, this.el, this.id, html, cid);\n    let childrenAdded = this.performPatch(patch, true);\n    return childrenAdded;\n  }\n  getHook(el) {\n    return this.viewHooks[ViewHook.elementID(el)];\n  }\n  addHook(el) {\n    if (ViewHook.elementID(el) || !el.getAttribute) {\n      return;\n    }\n    let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));\n    if (hookName && !this.ownsElement(el)) {\n      return;\n    }\n    let callbacks = this.liveSocket.getHookCallbacks(hookName);\n    if (callbacks) {\n      if (!el.id) {\n        logError(`no DOM ID for hook \"${hookName}\". Hooks require a unique ID on each element.`, el);\n      }\n      let hook = new ViewHook(this, el, callbacks);\n      this.viewHooks[ViewHook.elementID(hook.el)] = hook;\n      return hook;\n    } else if (hookName !== null) {\n      logError(`unknown hook found for \"${hookName}\"`, el);\n    }\n  }\n  destroyHook(hook) {\n    hook.__destroyed();\n    hook.__cleanup__();\n    delete this.viewHooks[ViewHook.elementID(hook.el)];\n  }\n  applyPendingUpdates() {\n    this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));\n    this.pendingDiffs = [];\n  }\n  onChannel(event, cb) {\n    this.liveSocket.onChannel(this.channel, event, (resp) => {\n      if (this.isJoinPending()) {\n        this.root.pendingJoinOps.push([this, () => cb(resp)]);\n      } else {\n        this.liveSocket.requestDOMUpdate(() => cb(resp));\n      }\n    });\n  }\n  bindChannel() {\n    this.liveSocket.onChannel(this.channel, \"diff\", (rawDiff) => {\n      this.liveSocket.requestDOMUpdate(() => {\n        this.applyDiff(\"update\", rawDiff, ({ diff, events }) => this.update(diff, events));\n      });\n    });\n    this.onChannel(\"redirect\", ({ to, flash }) => this.onRedirect({ to, flash }));\n    this.onChannel(\"live_patch\", (redir) => this.onLivePatch(redir));\n    this.onChannel(\"live_redirect\", (redir) => this.onLiveRedirect(redir));\n    this.channel.onError((reason) => this.onError(reason));\n    this.channel.onClose((reason) => this.onClose(reason));\n  }\n  destroyAllChildren() {\n    for (let id in this.root.children[this.id]) {\n      this.getChildById(id).destroy();\n    }\n  }\n  onLiveRedirect(redir) {\n    let { to, kind, flash } = redir;\n    let url = this.expandURL(to);\n    this.liveSocket.historyRedirect(url, kind, flash);\n  }\n  onLivePatch(redir) {\n    let { to, kind } = redir;\n    this.href = this.expandURL(to);\n    this.liveSocket.historyPatch(to, kind);\n  }\n  expandURL(to) {\n    return to.startsWith(\"/\") ? `${window.location.protocol}//${window.location.host}${to}` : to;\n  }\n  onRedirect({ to, flash }) {\n    this.liveSocket.redirect(to, flash);\n  }\n  isDestroyed() {\n    return this.destroyed;\n  }\n  join(callback) {\n    if (!this.parent) {\n      this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: \"initial\" });\n    }\n    this.joinCallback = (onDone) => {\n      onDone = onDone || function() {\n      };\n      callback ? callback(this.joinCount, onDone) : onDone();\n    };\n    this.liveSocket.wrapPush(this, { timeout: false }, () => {\n      return this.channel.join().receive(\"ok\", (data) => {\n        if (!this.isDestroyed()) {\n          this.liveSocket.requestDOMUpdate(() => this.onJoin(data));\n        }\n      }).receive(\"error\", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive(\"timeout\", () => !this.isDestroyed() && this.onJoinError({ reason: \"timeout\" }));\n    });\n  }\n  onJoinError(resp) {\n    if (resp.reason === \"unauthorized\" || resp.reason === \"stale\") {\n      this.log(\"error\", () => [\"unauthorized live_redirect. Falling back to page request\", resp]);\n      return this.onRedirect({ to: this.href });\n    }\n    if (resp.redirect || resp.live_redirect) {\n      this.joinPending = false;\n      this.channel.leave();\n    }\n    if (resp.redirect) {\n      return this.onRedirect(resp.redirect);\n    }\n    if (resp.live_redirect) {\n      return this.onLiveRedirect(resp.live_redirect);\n    }\n    this.log(\"error\", () => [\"unable to join\", resp]);\n    return this.liveSocket.reloadWithJitter(this);\n  }\n  onClose(reason) {\n    if (this.isDestroyed()) {\n      return;\n    }\n    if (this.isJoinPending() && document.visibilityState !== \"hidden\" || this.liveSocket.hasPendingLink() && reason !== \"leave\") {\n      return this.liveSocket.reloadWithJitter(this);\n    }\n    this.destroyAllChildren();\n    this.liveSocket.dropActiveElement(this);\n    if (document.activeElement) {\n      document.activeElement.blur();\n    }\n    if (this.liveSocket.isUnloaded()) {\n      this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);\n    }\n  }\n  onError(reason) {\n    this.onClose(reason);\n    this.log(\"error\", () => [\"view crashed\", reason]);\n    if (!this.liveSocket.isUnloaded()) {\n      this.displayError();\n    }\n  }\n  displayError() {\n    if (this.isMain()) {\n      dom_default.dispatchEvent(window, \"phx:page-loading-start\", { to: this.href, kind: \"error\" });\n    }\n    this.showLoader();\n    this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);\n  }\n  pushWithReply(refGenerator, event, payload, onReply = function() {\n  }) {\n    if (!this.isConnected()) {\n      return;\n    }\n    let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];\n    let onLoadingDone = function() {\n    };\n    if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {\n      onLoadingDone = this.liveSocket.withPageLoading({ kind: \"element\", target: el });\n    }\n    if (typeof payload.cid !== \"number\") {\n      delete payload.cid;\n    }\n    return this.liveSocket.wrapPush(this, { timeout: true }, () => {\n      return this.channel.push(event, payload, PUSH_TIMEOUT).receive(\"ok\", (resp) => {\n        this.liveSocket.requestDOMUpdate(() => {\n          let hookReply = null;\n          if (ref !== null) {\n            this.undoRefs(ref);\n          }\n          if (resp.diff) {\n            hookReply = this.applyDiff(\"update\", resp.diff, ({ diff, events }) => {\n              this.update(diff, events);\n            });\n          }\n          if (resp.redirect) {\n            this.onRedirect(resp.redirect);\n          }\n          if (resp.live_patch) {\n            this.onLivePatch(resp.live_patch);\n          }\n          if (resp.live_redirect) {\n            this.onLiveRedirect(resp.live_redirect);\n          }\n          onLoadingDone();\n          onReply(resp, hookReply);\n        });\n      });\n    });\n  }\n  undoRefs(ref) {\n    dom_default.all(this.el, `[${PHX_REF}=\"${ref}\"]`, (el) => {\n      let disabledVal = el.getAttribute(PHX_DISABLED);\n      el.removeAttribute(PHX_REF);\n      if (el.getAttribute(PHX_READONLY) !== null) {\n        el.readOnly = false;\n        el.removeAttribute(PHX_READONLY);\n      }\n      if (disabledVal !== null) {\n        el.disabled = disabledVal === \"true\" ? true : false;\n        el.removeAttribute(PHX_DISABLED);\n      }\n      PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));\n      let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);\n      if (disableRestore !== null) {\n        el.innerText = disableRestore;\n        el.removeAttribute(PHX_DISABLE_WITH_RESTORE);\n      }\n      let toEl = dom_default.private(el, PHX_REF);\n      if (toEl) {\n        let hook = this.triggerBeforeUpdateHook(el, toEl);\n        DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());\n        if (hook) {\n          hook.__updated();\n        }\n        dom_default.deletePrivate(el, PHX_REF);\n      }\n    });\n  }\n  putRef(elements, event, opts = {}) {\n    let newRef = this.ref++;\n    let disableWith = this.binding(PHX_DISABLE_WITH);\n    if (opts.loading) {\n      elements = elements.concat(dom_default.all(document, opts.loading));\n    }\n    elements.forEach((el) => {\n      el.classList.add(`phx-${event}-loading`);\n      el.setAttribute(PHX_REF, newRef);\n      let disableText = el.getAttribute(disableWith);\n      if (disableText !== null) {\n        if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {\n          el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);\n        }\n        el.innerText = disableText;\n      }\n    });\n    return [newRef, elements, opts];\n  }\n  componentID(el) {\n    let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);\n    return cid ? parseInt(cid) : null;\n  }\n  targetComponentID(target, targetCtx) {\n    if (isCid(targetCtx)) {\n      return targetCtx;\n    }\n    let cidOrSelector = target.getAttribute(this.binding(\"target\"));\n    if (isCid(cidOrSelector)) {\n      return parseInt(cidOrSelector);\n    } else if (targetCtx && cidOrSelector !== null) {\n      return this.closestComponentID(targetCtx);\n    } else {\n      return null;\n    }\n  }\n  closestComponentID(targetCtx) {\n    if (isCid(targetCtx)) {\n      return targetCtx;\n    } else if (targetCtx) {\n      return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));\n    } else {\n      return null;\n    }\n  }\n  pushHookEvent(targetCtx, event, payload, onReply) {\n    if (!this.isConnected()) {\n      this.log(\"hook\", () => [\"unable to push hook event. LiveView not connected\", event, payload]);\n      return false;\n    }\n    let [ref, els, opts] = this.putRef([], \"hook\");\n    this.pushWithReply(() => [ref, els, opts], \"event\", {\n      type: \"hook\",\n      event,\n      value: payload,\n      cid: this.closestComponentID(targetCtx)\n    }, (resp, reply) => onReply(reply, ref));\n    return ref;\n  }\n  extractMeta(el, meta, value) {\n    let prefix = this.binding(\"value-\");\n    for (let i = 0; i < el.attributes.length; i++) {\n      if (!meta) {\n        meta = {};\n      }\n      let name = el.attributes[i].name;\n      if (name.startsWith(prefix)) {\n        meta[name.replace(prefix, \"\")] = el.getAttribute(name);\n      }\n    }\n    if (el.value !== void 0) {\n      if (!meta) {\n        meta = {};\n      }\n      meta.value = el.value;\n      if (el.tagName === \"INPUT\" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {\n        delete meta.value;\n      }\n    }\n    if (value) {\n      if (!meta) {\n        meta = {};\n      }\n      for (let key in value) {\n        meta[key] = value[key];\n      }\n    }\n    return meta;\n  }\n  pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}) {\n    this.pushWithReply(() => this.putRef([el], type, opts), \"event\", {\n      type,\n      event: phxEvent,\n      value: this.extractMeta(el, meta, opts.value),\n      cid: this.targetComponentID(el, targetCtx)\n    });\n  }\n  pushFileProgress(fileEl, entryRef, progress, onReply = function() {\n  }) {\n    this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {\n      view.pushWithReply(null, \"progress\", {\n        event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),\n        ref: fileEl.getAttribute(PHX_UPLOAD_REF),\n        entry_ref: entryRef,\n        progress,\n        cid: view.targetComponentID(fileEl.form, targetCtx)\n      }, onReply);\n    });\n  }\n  pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {\n    let uploads;\n    let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);\n    let refGenerator = () => this.putRef([inputEl, inputEl.form], \"change\", opts);\n    let formData = serializeForm(inputEl.form, { _target: opts._target });\n    if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {\n      LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));\n    }\n    uploads = LiveUploader.serializeUploads(inputEl);\n    let event = {\n      type: \"form\",\n      event: phxEvent,\n      value: formData,\n      uploads,\n      cid\n    };\n    this.pushWithReply(refGenerator, \"event\", event, (resp) => {\n      dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));\n      if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute(\"data-phx-auto-upload\") !== null) {\n        if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {\n          let [ref, _els] = refGenerator();\n          this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {\n            callback && callback(resp);\n            this.triggerAwaitingSubmit(inputEl.form);\n          });\n        }\n      } else {\n        callback && callback(resp);\n      }\n    });\n  }\n  triggerAwaitingSubmit(formEl) {\n    let awaitingSubmit = this.getScheduledSubmit(formEl);\n    if (awaitingSubmit) {\n      let [_el, _ref, _opts, callback] = awaitingSubmit;\n      this.cancelSubmit(formEl);\n      callback();\n    }\n  }\n  getScheduledSubmit(formEl) {\n    return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));\n  }\n  scheduleSubmit(formEl, ref, opts, callback) {\n    if (this.getScheduledSubmit(formEl)) {\n      return true;\n    }\n    this.formSubmits.push([formEl, ref, opts, callback]);\n  }\n  cancelSubmit(formEl) {\n    this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {\n      if (el.isSameNode(formEl)) {\n        this.undoRefs(ref);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  pushFormSubmit(formEl, targetCtx, phxEvent, opts, onReply) {\n    let filterIgnored = (el) => {\n      let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);\n      return !(userIgnored || closestPhxBinding(el, \"data-phx-update=ignore\", el.form));\n    };\n    let filterDisables = (el) => {\n      return el.hasAttribute(this.binding(PHX_DISABLE_WITH));\n    };\n    let filterButton = (el) => el.tagName == \"BUTTON\";\n    let filterInput = (el) => [\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(el.tagName);\n    let refGenerator = () => {\n      let formElements = Array.from(formEl.elements);\n      let disables = formElements.filter(filterDisables);\n      let buttons = formElements.filter(filterButton).filter(filterIgnored);\n      let inputs = formElements.filter(filterInput).filter(filterIgnored);\n      buttons.forEach((button) => {\n        button.setAttribute(PHX_DISABLED, button.disabled);\n        button.disabled = true;\n      });\n      inputs.forEach((input) => {\n        input.setAttribute(PHX_READONLY, input.readOnly);\n        input.readOnly = true;\n        if (input.files) {\n          input.setAttribute(PHX_DISABLED, input.disabled);\n          input.disabled = true;\n        }\n      });\n      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), \"\");\n      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), \"submit\", opts);\n    };\n    let cid = this.targetComponentID(formEl, targetCtx);\n    if (LiveUploader.hasUploadsInProgress(formEl)) {\n      let [ref, _els] = refGenerator();\n      let push = () => this.pushFormSubmit(formEl, targetCtx, phxEvent, opts, onReply);\n      return this.scheduleSubmit(formEl, ref, opts, push);\n    } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {\n      let [ref, els] = refGenerator();\n      let proxyRefGen = () => [ref, els, opts];\n      this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {\n        let formData = serializeForm(formEl, {});\n        this.pushWithReply(proxyRefGen, \"event\", {\n          type: \"form\",\n          event: phxEvent,\n          value: formData,\n          cid\n        }, onReply);\n      });\n    } else {\n      let formData = serializeForm(formEl);\n      this.pushWithReply(refGenerator, \"event\", {\n        type: \"form\",\n        event: phxEvent,\n        value: formData,\n        cid\n      }, onReply);\n    }\n  }\n  uploadFiles(formEl, targetCtx, ref, cid, onComplete) {\n    let joinCountAtUpload = this.joinCount;\n    let inputEls = LiveUploader.activeFileInputs(formEl);\n    let numFileInputsInProgress = inputEls.length;\n    inputEls.forEach((inputEl) => {\n      let uploader = new LiveUploader(inputEl, this, () => {\n        numFileInputsInProgress--;\n        if (numFileInputsInProgress === 0) {\n          onComplete();\n        }\n      });\n      this.uploaders[inputEl] = uploader;\n      let entries = uploader.entries().map((entry) => entry.toPreflightPayload());\n      let payload = {\n        ref: inputEl.getAttribute(PHX_UPLOAD_REF),\n        entries,\n        cid: this.targetComponentID(inputEl.form, targetCtx)\n      };\n      this.log(\"upload\", () => [\"sending preflight request\", payload]);\n      this.pushWithReply(null, \"allow_upload\", payload, (resp) => {\n        this.log(\"upload\", () => [\"got preflight response\", resp]);\n        if (resp.error) {\n          this.undoRefs(ref);\n          let [entry_ref, reason] = resp.error;\n          this.log(\"upload\", () => [`error for entry ${entry_ref}`, reason]);\n        } else {\n          let onError = (callback) => {\n            this.channel.onError(() => {\n              if (this.joinCount === joinCountAtUpload) {\n                callback();\n              }\n            });\n          };\n          uploader.initAdapterUpload(resp, onError, this.liveSocket);\n        }\n      });\n    });\n  }\n  dispatchUploads(name, filesOrBlobs) {\n    let inputs = dom_default.findUploadInputs(this.el).filter((el) => el.name === name);\n    if (inputs.length === 0) {\n      logError(`no live file inputs found matching the name \"${name}\"`);\n    } else if (inputs.length > 1) {\n      logError(`duplicate live file inputs found matching the name \"${name}\"`);\n    } else {\n      dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { files: filesOrBlobs });\n    }\n  }\n  pushFormRecovery(form, newCid, callback) {\n    this.liveSocket.withinOwners(form, (view, targetCtx) => {\n      let input = form.elements[0];\n      let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding(\"change\"));\n      js_default.exec(\"change\", phxEvent, view, input, [\"push\", { _target: input.name, newCid, callback }]);\n    });\n  }\n  pushLinkPatch(href, targetEl, callback) {\n    let linkRef = this.liveSocket.setPendingLink(href);\n    let refGen = targetEl ? () => this.putRef([targetEl], \"click\") : null;\n    this.pushWithReply(refGen, \"live_patch\", { url: href }, (resp) => {\n      this.liveSocket.requestDOMUpdate(() => {\n        if (resp.link_redirect) {\n          this.liveSocket.replaceMain(href, null, callback, linkRef);\n        } else {\n          if (this.liveSocket.commitPendingLink(linkRef)) {\n            this.href = href;\n          }\n          this.applyPendingUpdates();\n          callback && callback(linkRef);\n        }\n      });\n    }).receive(\"timeout\", () => this.liveSocket.redirect(window.location.href));\n  }\n  formsForRecovery(html) {\n    if (this.joinCount === 0) {\n      return [];\n    }\n    let phxChange = this.binding(\"change\");\n    let template = document.createElement(\"template\");\n    template.innerHTML = html;\n    return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== \"ignore\").map((form) => {\n      let newForm = template.content.querySelector(`form[id=\"${form.id}\"][${phxChange}=\"${form.getAttribute(phxChange)}\"]`);\n      if (newForm) {\n        return [form, newForm, this.targetComponentID(newForm)];\n      } else {\n        return [form, null, null];\n      }\n    }).filter(([form, newForm, newCid]) => newForm);\n  }\n  maybePushComponentsDestroyed(destroyedCIDs) {\n    let willDestroyCIDs = destroyedCIDs.filter((cid) => {\n      return dom_default.findComponentNodeList(this.el, cid).length === 0;\n    });\n    if (willDestroyCIDs.length > 0) {\n      this.pruningCIDs.push(...willDestroyCIDs);\n      this.pushWithReply(null, \"cids_will_destroy\", { cids: willDestroyCIDs }, () => {\n        this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);\n        let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {\n          return dom_default.findComponentNodeList(this.el, cid).length === 0;\n        });\n        if (completelyDestroyCIDs.length > 0) {\n          this.pushWithReply(null, \"cids_destroyed\", { cids: completelyDestroyCIDs }, (resp) => {\n            this.rendered.pruneCIDs(resp.cids);\n          });\n        }\n      });\n    }\n  }\n  ownsElement(el) {\n    return el.getAttribute(PHX_PARENT_ID) === this.id || maybe(el.closest(PHX_VIEW_SELECTOR), (node) => node.id) === this.id;\n  }\n  submitForm(form, targetCtx, phxEvent, opts = {}) {\n    dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);\n    this.liveSocket.blurActiveElement(this);\n    this.pushFormSubmit(form, targetCtx, phxEvent, opts, () => {\n      this.liveSocket.restorePreviouslyActiveFocus();\n    });\n  }\n  binding(kind) {\n    return this.liveSocket.binding(kind);\n  }\n};\n\n// js/phoenix_live_view/live_socket.js\nvar LiveSocket = class {\n  constructor(url, phxSocket, opts = {}) {\n    this.unloaded = false;\n    if (!phxSocket || phxSocket.constructor.name === \"Object\") {\n      throw new Error(`\n      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:\n\n          import {Socket} from \"phoenix\"\n          import LiveSocket from \"phoenix_live_view\"\n          let liveSocket = new LiveSocket(\"/live\", Socket, {...})\n      `);\n    }\n    this.socket = new phxSocket(url, opts);\n    this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;\n    this.opts = opts;\n    this.params = closure(opts.params || {});\n    this.viewLogger = opts.viewLogger;\n    this.metadataCallbacks = opts.metadata || {};\n    this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});\n    this.activeElement = null;\n    this.prevActive = null;\n    this.silenced = false;\n    this.main = null;\n    this.linkRef = 1;\n    this.roots = {};\n    this.href = window.location.href;\n    this.pendingLink = null;\n    this.currentLocation = clone(window.location);\n    this.hooks = opts.hooks || {};\n    this.uploaders = opts.uploaders || {};\n    this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;\n    this.localStorage = opts.localStorage || window.localStorage;\n    this.sessionStorage = opts.sessionStorage || window.sessionStorage;\n    this.boundTopLevelEvents = false;\n    this.domCallbacks = Object.assign({ onNodeAdded: closure(), onBeforeElUpdated: closure() }, opts.dom || {});\n    this.transitions = new TransitionSet();\n    window.addEventListener(\"pagehide\", (_e) => {\n      this.unloaded = true;\n    });\n    this.socket.onOpen(() => {\n      if (this.isUnloaded()) {\n        window.location.reload();\n      }\n    });\n  }\n  isProfileEnabled() {\n    return this.sessionStorage.getItem(PHX_LV_PROFILE) === \"true\";\n  }\n  isDebugEnabled() {\n    return this.sessionStorage.getItem(PHX_LV_DEBUG) === \"true\";\n  }\n  enableDebug() {\n    this.sessionStorage.setItem(PHX_LV_DEBUG, \"true\");\n  }\n  enableProfiling() {\n    this.sessionStorage.setItem(PHX_LV_PROFILE, \"true\");\n  }\n  disableDebug() {\n    this.sessionStorage.removeItem(PHX_LV_DEBUG);\n  }\n  disableProfiling() {\n    this.sessionStorage.removeItem(PHX_LV_PROFILE);\n  }\n  enableLatencySim(upperBoundMs) {\n    this.enableDebug();\n    console.log(\"latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable\");\n    this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);\n  }\n  disableLatencySim() {\n    this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);\n  }\n  getLatencySim() {\n    let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);\n    return str ? parseInt(str) : null;\n  }\n  getSocket() {\n    return this.socket;\n  }\n  connect() {\n    let doConnect = () => {\n      if (this.joinRootViews()) {\n        this.bindTopLevelEvents();\n        this.socket.connect();\n      }\n    };\n    if ([\"complete\", \"loaded\", \"interactive\"].indexOf(document.readyState) >= 0) {\n      doConnect();\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", () => doConnect());\n    }\n  }\n  disconnect(callback) {\n    this.socket.disconnect(callback);\n  }\n  execJS(el, encodedJS, eventType = null) {\n    this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));\n  }\n  triggerDOM(kind, args) {\n    this.domCallbacks[kind](...args);\n  }\n  time(name, func) {\n    if (!this.isProfileEnabled() || !console.time) {\n      return func();\n    }\n    console.time(name);\n    let result = func();\n    console.timeEnd(name);\n    return result;\n  }\n  log(view, kind, msgCallback) {\n    if (this.viewLogger) {\n      let [msg, obj] = msgCallback();\n      this.viewLogger(view, kind, msg, obj);\n    } else if (this.isDebugEnabled()) {\n      let [msg, obj] = msgCallback();\n      debug(view, kind, msg, obj);\n    }\n  }\n  requestDOMUpdate(callback) {\n    this.transitions.after(callback);\n  }\n  transition(time, onStart, onDone = function() {\n  }) {\n    this.transitions.addTransition(time, onStart, onDone);\n  }\n  onChannel(channel, event, cb) {\n    channel.on(event, (data) => {\n      let latency = this.getLatencySim();\n      if (!latency) {\n        cb(data);\n      } else {\n        console.log(`simulating ${latency}ms of latency from server to client`);\n        setTimeout(() => cb(data), latency);\n      }\n    });\n  }\n  wrapPush(view, opts, push) {\n    let latency = this.getLatencySim();\n    let oldJoinCount = view.joinCount;\n    if (!latency) {\n      if (opts.timeout) {\n        return push().receive(\"timeout\", () => {\n          if (view.joinCount === oldJoinCount && !view.isDestroyed()) {\n            this.reloadWithJitter(view, () => {\n              this.log(view, \"timeout\", () => [\"received timeout while communicating with server. Falling back to hard refresh for recovery\"]);\n            });\n          }\n        });\n      } else {\n        return push();\n      }\n    }\n    console.log(`simulating ${latency}ms of latency from client to server`);\n    let fakePush = {\n      receives: [],\n      receive(kind, cb) {\n        this.receives.push([kind, cb]);\n      }\n    };\n    setTimeout(() => {\n      if (view.isDestroyed()) {\n        return;\n      }\n      fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());\n    }, latency);\n    return fakePush;\n  }\n  reloadWithJitter(view, log) {\n    view.destroy();\n    this.disconnect();\n    let [minMs, maxMs] = RELOAD_JITTER;\n    let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;\n    let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);\n    log ? log() : this.log(view, \"join\", () => [`encountered ${tries} consecutive reloads`]);\n    if (tries > MAX_RELOADS) {\n      this.log(view, \"join\", () => [`exceeded ${MAX_RELOADS} consecutive reloads. Entering failsafe mode`]);\n      afterMs = FAILSAFE_JITTER;\n    }\n    setTimeout(() => {\n      if (this.hasPendingLink()) {\n        window.location = this.pendingLink;\n      } else {\n        window.location.reload();\n      }\n    }, afterMs);\n  }\n  getHookCallbacks(name) {\n    return name && name.startsWith(\"Phoenix.\") ? hooks_default[name.split(\".\")[1]] : this.hooks[name];\n  }\n  isUnloaded() {\n    return this.unloaded;\n  }\n  isConnected() {\n    return this.socket.isConnected();\n  }\n  getBindingPrefix() {\n    return this.bindingPrefix;\n  }\n  binding(kind) {\n    return `${this.getBindingPrefix()}${kind}`;\n  }\n  channel(topic, params) {\n    return this.socket.channel(topic, params);\n  }\n  joinRootViews() {\n    let rootsFound = false;\n    dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {\n      if (!this.getRootById(rootEl.id)) {\n        let view = this.newRootView(rootEl);\n        view.setHref(this.getHref());\n        view.join();\n        if (rootEl.getAttribute(PHX_MAIN)) {\n          this.main = view;\n        }\n      }\n      rootsFound = true;\n    });\n    return rootsFound;\n  }\n  redirect(to, flash) {\n    this.disconnect();\n    browser_default.redirect(to, flash);\n  }\n  replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {\n    let oldMainEl = this.main.el;\n    let newMainEl = dom_default.cloneNode(oldMainEl, \"\");\n    this.main.showLoader(this.loaderTimeout);\n    this.main.destroy();\n    this.main = this.newRootView(newMainEl, flash);\n    this.main.setRedirect(href);\n    this.transitionRemoves();\n    this.main.join((joinCount, onDone) => {\n      if (joinCount === 1 && this.commitPendingLink(linkRef)) {\n        this.requestDOMUpdate(() => {\n          oldMainEl.replaceWith(newMainEl);\n          callback && callback();\n          onDone();\n        });\n      }\n    });\n  }\n  transitionRemoves(elements) {\n    let removeAttr = this.binding(\"remove\");\n    elements = elements || dom_default.all(document, `[${removeAttr}]`);\n    elements.forEach((el) => {\n      if (document.body.contains(el)) {\n        this.execJS(el, el.getAttribute(removeAttr), \"remove\");\n      }\n    });\n  }\n  isPhxView(el) {\n    return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;\n  }\n  newRootView(el, flash) {\n    let view = new View(el, this, null, flash);\n    this.roots[view.id] = view;\n    return view;\n  }\n  owner(childEl, callback) {\n    let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;\n    if (view) {\n      callback(view);\n    }\n  }\n  withinOwners(childEl, callback) {\n    this.owner(childEl, (view) => callback(view, childEl));\n  }\n  getViewByEl(el) {\n    let rootId = el.getAttribute(PHX_ROOT_ID);\n    return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));\n  }\n  getRootById(id) {\n    return this.roots[id];\n  }\n  destroyAllViews() {\n    for (let id in this.roots) {\n      this.roots[id].destroy();\n      delete this.roots[id];\n    }\n  }\n  destroyViewByEl(el) {\n    let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));\n    if (root) {\n      root.destroyDescendent(el.id);\n    }\n  }\n  setActiveElement(target) {\n    if (this.activeElement === target) {\n      return;\n    }\n    this.activeElement = target;\n    let cancel = () => {\n      if (target === this.activeElement) {\n        this.activeElement = null;\n      }\n      target.removeEventListener(\"mouseup\", this);\n      target.removeEventListener(\"touchend\", this);\n    };\n    target.addEventListener(\"mouseup\", cancel);\n    target.addEventListener(\"touchend\", cancel);\n  }\n  getActiveElement() {\n    if (document.activeElement === document.body) {\n      return this.activeElement || document.activeElement;\n    } else {\n      return document.activeElement || document.body;\n    }\n  }\n  dropActiveElement(view) {\n    if (this.prevActive && view.ownsElement(this.prevActive)) {\n      this.prevActive = null;\n    }\n  }\n  restorePreviouslyActiveFocus() {\n    if (this.prevActive && this.prevActive !== document.body) {\n      this.prevActive.focus();\n    }\n  }\n  blurActiveElement() {\n    this.prevActive = this.getActiveElement();\n    if (this.prevActive !== document.body) {\n      this.prevActive.blur();\n    }\n  }\n  bindTopLevelEvents() {\n    if (this.boundTopLevelEvents) {\n      return;\n    }\n    this.boundTopLevelEvents = true;\n    document.body.addEventListener(\"click\", function() {\n    });\n    window.addEventListener(\"pageshow\", (e) => {\n      if (e.persisted) {\n        this.getSocket().disconnect();\n        this.withPageLoading({ to: window.location.href, kind: \"redirect\" });\n        window.location.reload();\n      }\n    }, true);\n    this.bindNav();\n    this.bindClicks();\n    this.bindForms();\n    this.bind({ keyup: \"keyup\", keydown: \"keydown\" }, (e, type, view, targetEl, phxEvent, eventTarget) => {\n      let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));\n      let pressedKey = e.key && e.key.toLowerCase();\n      if (matchKey && matchKey.toLowerCase() !== pressedKey) {\n        return;\n      }\n      let data = { key: e.key, ...this.eventMeta(type, e, targetEl) };\n      js_default.exec(type, phxEvent, view, targetEl, [\"push\", { data }]);\n    });\n    this.bind({ blur: \"focusout\", focus: \"focusin\" }, (e, type, view, targetEl, phxEvent, eventTarget) => {\n      if (!eventTarget) {\n        let data = { key: e.key, ...this.eventMeta(type, e, targetEl) };\n        js_default.exec(type, phxEvent, view, targetEl, [\"push\", { data }]);\n      }\n    });\n    this.bind({ blur: \"blur\", focus: \"focus\" }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {\n      if (phxTarget === \"window\") {\n        let data = this.eventMeta(type, e, targetEl);\n        js_default.exec(type, phxEvent, view, targetEl, [\"push\", { data }]);\n      }\n    });\n    window.addEventListener(\"dragover\", (e) => e.preventDefault());\n    window.addEventListener(\"drop\", (e) => {\n      e.preventDefault();\n      let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {\n        return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));\n      });\n      let dropTarget = dropTargetId && document.getElementById(dropTargetId);\n      let files = Array.from(e.dataTransfer.files || []);\n      if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {\n        return;\n      }\n      LiveUploader.trackFiles(dropTarget, files);\n      dropTarget.dispatchEvent(new Event(\"input\", { bubbles: true }));\n    });\n    this.on(PHX_TRACK_UPLOADS, (e) => {\n      let uploadTarget = e.target;\n      if (!dom_default.isUploadInput(uploadTarget)) {\n        return;\n      }\n      let files = Array.from(e.detail.files || []).filter((f) => f instanceof File || f instanceof Blob);\n      LiveUploader.trackFiles(uploadTarget, files);\n      uploadTarget.dispatchEvent(new Event(\"input\", { bubbles: true }));\n    });\n  }\n  eventMeta(eventName, e, targetEl) {\n    let callback = this.metadataCallbacks[eventName];\n    return callback ? callback(e, targetEl) : {};\n  }\n  setPendingLink(href) {\n    this.linkRef++;\n    this.pendingLink = href;\n    return this.linkRef;\n  }\n  commitPendingLink(linkRef) {\n    if (this.linkRef !== linkRef) {\n      return false;\n    } else {\n      this.href = this.pendingLink;\n      this.pendingLink = null;\n      return true;\n    }\n  }\n  getHref() {\n    return this.href;\n  }\n  hasPendingLink() {\n    return !!this.pendingLink;\n  }\n  bind(events, callback) {\n    for (let event in events) {\n      let browserEventName = events[event];\n      this.on(browserEventName, (e) => {\n        let binding = this.binding(event);\n        let windowBinding = this.binding(`window-${event}`);\n        let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);\n        if (targetPhxEvent) {\n          this.debounce(e.target, e, () => {\n            this.withinOwners(e.target, (view) => {\n              callback(e, event, view, e.target, targetPhxEvent, null);\n            });\n          });\n        } else {\n          dom_default.all(document, `[${windowBinding}]`, (el) => {\n            let phxEvent = el.getAttribute(windowBinding);\n            this.debounce(el, e, () => {\n              this.withinOwners(el, (view) => {\n                callback(e, event, view, el, phxEvent, \"window\");\n              });\n            });\n          });\n        }\n      });\n    }\n  }\n  bindClicks() {\n    this.bindClick(\"click\", \"click\", false);\n    this.bindClick(\"mousedown\", \"capture-click\", true);\n  }\n  bindClick(eventName, bindingName, capture) {\n    let click = this.binding(bindingName);\n    window.addEventListener(eventName, (e) => {\n      if (!this.isConnected()) {\n        return;\n      }\n      let target = null;\n      if (capture) {\n        target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);\n      } else {\n        target = closestPhxBinding(e.target, click);\n        this.dispatchClickAway(e);\n      }\n      let phxEvent = target && target.getAttribute(click);\n      if (!phxEvent) {\n        return;\n      }\n      if (target.getAttribute(\"href\") === \"#\") {\n        e.preventDefault();\n      }\n      this.debounce(target, e, () => {\n        this.withinOwners(target, (view) => {\n          js_default.exec(\"click\", phxEvent, view, target, [\"push\", { data: this.eventMeta(\"click\", e, target) }]);\n        });\n      });\n    }, capture);\n  }\n  dispatchClickAway(e) {\n    let binding = this.binding(\"click-away\");\n    dom_default.all(document, `[${binding}]`, (el) => {\n      if (!(el.isSameNode(e.target) || el.contains(e.target))) {\n        this.withinOwners(e.target, (view) => {\n          let phxEvent = el.getAttribute(binding);\n          if (js_default.isVisible(el)) {\n            js_default.exec(\"click\", phxEvent, view, e.target, [\"push\", { data: this.eventMeta(\"click\", e, e.target) }]);\n          }\n        });\n      }\n    });\n  }\n  bindNav() {\n    if (!browser_default.canPushState()) {\n      return;\n    }\n    if (history.scrollRestoration) {\n      history.scrollRestoration = \"manual\";\n    }\n    let scrollTimer = null;\n    window.addEventListener(\"scroll\", (_e) => {\n      clearTimeout(scrollTimer);\n      scrollTimer = setTimeout(() => {\n        browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));\n      }, 100);\n    });\n    window.addEventListener(\"popstate\", (event) => {\n      if (!this.registerNewLocation(window.location)) {\n        return;\n      }\n      let { type, id, root, scroll } = event.state || {};\n      let href = window.location.href;\n      this.requestDOMUpdate(() => {\n        if (this.main.isConnected() && (type === \"patch\" && id === this.main.id)) {\n          this.main.pushLinkPatch(href, null);\n        } else {\n          this.replaceMain(href, null, () => {\n            if (root) {\n              this.replaceRootHistory();\n            }\n            if (typeof scroll === \"number\") {\n              setTimeout(() => {\n                window.scrollTo(0, scroll);\n              }, 0);\n            }\n          });\n        }\n      });\n    }, false);\n    window.addEventListener(\"click\", (e) => {\n      let target = closestPhxBinding(e.target, PHX_LIVE_LINK);\n      let type = target && target.getAttribute(PHX_LIVE_LINK);\n      let wantsNewTab = e.metaKey || e.ctrlKey || e.button === 1;\n      if (!type || !this.isConnected() || !this.main || wantsNewTab) {\n        return;\n      }\n      let href = target.href;\n      let linkState = target.getAttribute(PHX_LINK_STATE);\n      e.preventDefault();\n      if (this.pendingLink === href) {\n        return;\n      }\n      this.requestDOMUpdate(() => {\n        if (type === \"patch\") {\n          this.pushHistoryPatch(href, linkState, target);\n        } else if (type === \"redirect\") {\n          this.historyRedirect(href, linkState);\n        } else {\n          throw new Error(`expected ${PHX_LIVE_LINK} to be \"patch\" or \"redirect\", got: ${type}`);\n        }\n      });\n    }, false);\n  }\n  dispatchEvent(event, payload = {}) {\n    dom_default.dispatchEvent(window, `phx:${event}`, payload);\n  }\n  dispatchEvents(events) {\n    events.forEach(([event, payload]) => this.dispatchEvent(event, payload));\n  }\n  withPageLoading(info, callback) {\n    dom_default.dispatchEvent(window, \"phx:page-loading-start\", info);\n    let done = () => dom_default.dispatchEvent(window, \"phx:page-loading-stop\", info);\n    return callback ? callback(done) : done;\n  }\n  pushHistoryPatch(href, linkState, targetEl) {\n    this.withPageLoading({ to: href, kind: \"patch\" }, (done) => {\n      this.main.pushLinkPatch(href, targetEl, (linkRef) => {\n        this.historyPatch(href, linkState, linkRef);\n        done();\n      });\n    });\n  }\n  historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {\n    if (!this.commitPendingLink(linkRef)) {\n      return;\n    }\n    browser_default.pushState(linkState, { type: \"patch\", id: this.main.id }, href);\n    this.registerNewLocation(window.location);\n  }\n  historyRedirect(href, linkState, flash) {\n    let scroll = window.scrollY;\n    this.withPageLoading({ to: href, kind: \"redirect\" }, (done) => {\n      this.replaceMain(href, flash, () => {\n        browser_default.pushState(linkState, { type: \"redirect\", id: this.main.id, scroll }, href);\n        this.registerNewLocation(window.location);\n        done();\n      });\n    });\n  }\n  replaceRootHistory() {\n    browser_default.pushState(\"replace\", { root: true, type: \"patch\", id: this.main.id });\n  }\n  registerNewLocation(newLocation) {\n    let { pathname, search } = this.currentLocation;\n    if (pathname + search === newLocation.pathname + newLocation.search) {\n      return false;\n    } else {\n      this.currentLocation = clone(newLocation);\n      return true;\n    }\n  }\n  bindForms() {\n    let iterations = 0;\n    this.on(\"submit\", (e) => {\n      let phxEvent = e.target.getAttribute(this.binding(\"submit\"));\n      if (!phxEvent) {\n        return;\n      }\n      e.preventDefault();\n      e.target.disabled = true;\n      this.withinOwners(e.target, (view) => {\n        js_default.exec(\"submit\", phxEvent, view, e.target, [\"push\", {}]);\n      });\n    }, false);\n    for (let type of [\"change\", \"input\"]) {\n      this.on(type, (e) => {\n        let input = e.target;\n        let phxEvent = input.form && input.form.getAttribute(this.binding(\"change\"));\n        if (!phxEvent) {\n          return;\n        }\n        if (input.type === \"number\" && input.validity && input.validity.badInput) {\n          return;\n        }\n        let currentIterations = iterations;\n        iterations++;\n        let { at, type: lastType } = dom_default.private(input, \"prev-iteration\") || {};\n        if (at === currentIterations - 1 && type !== lastType) {\n          return;\n        }\n        dom_default.putPrivate(input, \"prev-iteration\", { at: currentIterations, type });\n        this.debounce(input, e, () => {\n          this.withinOwners(input.form, (view) => {\n            dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);\n            if (!dom_default.isTextualInput(input)) {\n              this.setActiveElement(input);\n            }\n            js_default.exec(\"change\", phxEvent, view, input, [\"push\", { _target: e.target.name }]);\n          });\n        });\n      }, false);\n    }\n  }\n  debounce(el, event, callback) {\n    let phxDebounce = this.binding(PHX_DEBOUNCE);\n    let phxThrottle = this.binding(PHX_THROTTLE);\n    let defaultDebounce = this.defaults.debounce.toString();\n    let defaultThrottle = this.defaults.throttle.toString();\n    dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, callback);\n  }\n  silenceEvents(callback) {\n    this.silenced = true;\n    callback();\n    this.silenced = false;\n  }\n  on(event, callback) {\n    window.addEventListener(event, (e) => {\n      if (!this.silenced) {\n        callback(e);\n      }\n    });\n  }\n};\nvar TransitionSet = class {\n  constructor() {\n    this.transitions = new Set();\n    this.pendingOps = [];\n    this.reset();\n  }\n  reset() {\n    this.transitions.forEach((timer) => {\n      cancelTimeout(timer);\n      this.transitions.delete(timer);\n    });\n    this.flushPendingOps();\n  }\n  after(callback) {\n    if (this.size() === 0) {\n      callback();\n    } else {\n      this.pushPendingOp(callback);\n    }\n  }\n  addTransition(time, onStart, onDone) {\n    onStart();\n    let timer = setTimeout(() => {\n      this.transitions.delete(timer);\n      onDone();\n      if (this.size() === 0) {\n        this.flushPendingOps();\n      }\n    }, time);\n    this.transitions.add(timer);\n  }\n  pushPendingOp(op) {\n    this.pendingOps.push(op);\n  }\n  size() {\n    return this.transitions.size;\n  }\n  flushPendingOps() {\n    this.pendingOps.forEach((op) => op());\n    this.pendingOps = [];\n  }\n};\n\n//# sourceMappingURL=phoenix_live_view.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/phoenix_live_view/priv/static/phoenix_live_view.esm.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/Y2VkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./vendor/topbar.js":
/*!**************************!*\
  !*** ./vendor/topbar.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * @license MIT\n * topbar 1.0.0, 2021-01-06\n * http://buunguyen.github.io/topbar\n * Copyright (c) 2021 Buu Nguyen\n */\n(function (window, document) {\n  \"use strict\"; // https://gist.github.com/paulirish/1579671\n\n  (function () {\n    var lastTime = 0;\n    var vendors = [\"ms\", \"moz\", \"webkit\", \"o\"];\n\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      window.requestAnimationFrame = window[vendors[x] + \"RequestAnimationFrame\"];\n      window.cancelAnimationFrame = window[vendors[x] + \"CancelAnimationFrame\"] || window[vendors[x] + \"CancelRequestAnimationFrame\"];\n    }\n\n    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  })();\n\n  var canvas,\n      progressTimerId,\n      fadeTimerId,\n      currentProgress,\n      showing,\n      addEvent = function addEvent(elem, type, handler) {\n    if (elem.addEventListener) elem.addEventListener(type, handler, false);else if (elem.attachEvent) elem.attachEvent(\"on\" + type, handler);else elem[\"on\" + type] = handler;\n  },\n      options = {\n    autoRun: true,\n    barThickness: 3,\n    barColors: {\n      0: \"rgba(26,  188, 156, .9)\",\n      \".25\": \"rgba(52,  152, 219, .9)\",\n      \".50\": \"rgba(241, 196, 15,  .9)\",\n      \".75\": \"rgba(230, 126, 34,  .9)\",\n      \"1.0\": \"rgba(211, 84,  0,   .9)\"\n    },\n    shadowBlur: 10,\n    shadowColor: \"rgba(0,   0,   0,   .6)\",\n    className: null\n  },\n      repaint = function repaint() {\n    canvas.width = window.innerWidth;\n    canvas.height = options.barThickness * 5; // need space for shadow\n\n    var ctx = canvas.getContext(\"2d\");\n    ctx.shadowBlur = options.shadowBlur;\n    ctx.shadowColor = options.shadowColor;\n    var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n\n    for (var stop in options.barColors) {\n      lineGradient.addColorStop(stop, options.barColors[stop]);\n    }\n\n    ctx.lineWidth = options.barThickness;\n    ctx.beginPath();\n    ctx.moveTo(0, options.barThickness / 2);\n    ctx.lineTo(Math.ceil(currentProgress * canvas.width), options.barThickness / 2);\n    ctx.strokeStyle = lineGradient;\n    ctx.stroke();\n  },\n      createCanvas = function createCanvas() {\n    canvas = document.createElement(\"canvas\");\n    var style = canvas.style;\n    style.position = \"fixed\";\n    style.top = style.left = style.right = style.margin = style.padding = 0;\n    style.zIndex = 100001;\n    style.display = \"none\";\n    if (options.className) canvas.classList.add(options.className);\n    document.body.appendChild(canvas);\n    addEvent(window, \"resize\", repaint);\n  },\n      topbar = {\n    config: function config(opts) {\n      for (var key in opts) {\n        if (options.hasOwnProperty(key)) options[key] = opts[key];\n      }\n    },\n    show: function show() {\n      if (showing) return;\n      showing = true;\n      if (fadeTimerId !== null) window.cancelAnimationFrame(fadeTimerId);\n      if (!canvas) createCanvas();\n      canvas.style.opacity = 1;\n      canvas.style.display = \"block\";\n      topbar.progress(0);\n\n      if (options.autoRun) {\n        (function loop() {\n          progressTimerId = window.requestAnimationFrame(loop);\n          topbar.progress(\"+\" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2));\n        })();\n      }\n    },\n    progress: function progress(to) {\n      if (typeof to === \"undefined\") return currentProgress;\n\n      if (typeof to === \"string\") {\n        to = (to.indexOf(\"+\") >= 0 || to.indexOf(\"-\") >= 0 ? currentProgress : 0) + parseFloat(to);\n      }\n\n      currentProgress = to > 1 ? 1 : to;\n      repaint();\n      return currentProgress;\n    },\n    hide: function hide() {\n      if (!showing) return;\n      showing = false;\n\n      if (progressTimerId != null) {\n        window.cancelAnimationFrame(progressTimerId);\n        progressTimerId = null;\n      }\n\n      (function loop() {\n        if (topbar.progress(\"+.1\") >= 1) {\n          canvas.style.opacity -= 0.05;\n\n          if (canvas.style.opacity <= 0.05) {\n            canvas.style.display = \"none\";\n            fadeTimerId = null;\n            return;\n          }\n        }\n\n        fadeTimerId = window.requestAnimationFrame(loop);\n      })();\n    }\n  };\n\n  if (( false ? undefined : _typeof(module)) === \"object\" && _typeof(module.exports) === \"object\") {\n    module.exports = topbar;\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return topbar;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}).call(this, window, document);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZW5kb3IvdG9wYmFyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdmVuZG9yL3RvcGJhci5qcz8zMzk0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgTUlUXG4gKiB0b3BiYXIgMS4wLjAsIDIwMjEtMDEtMDZcbiAqIGh0dHA6Ly9idXVuZ3V5ZW4uZ2l0aHViLmlvL3RvcGJhclxuICogQ29weXJpZ2h0IChjKSAyMDIxIEJ1dSBOZ3V5ZW5cbiAqL1xuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC8xNTc5NjcxXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICB2YXIgdmVuZG9ycyA9IFtcIm1zXCIsIFwibW96XCIsIFwid2Via2l0XCIsIFwib1wiXTtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK3gpIHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPVxuICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArIFwiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID1cbiAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyBcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdIHx8XG4gICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgXCJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG4gICAgfVxuICAgIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xuICAgICAgICB2YXIgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcbiAgICAgICAgfSwgdGltZVRvQ2FsbCk7XG4gICAgICAgIGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsO1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9O1xuICAgIGlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKVxuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICB9O1xuICB9KSgpO1xuXG4gIHZhciBjYW52YXMsXG4gICAgcHJvZ3Jlc3NUaW1lcklkLFxuICAgIGZhZGVUaW1lcklkLFxuICAgIGN1cnJlbnRQcm9ncmVzcyxcbiAgICBzaG93aW5nLFxuICAgIGFkZEV2ZW50ID0gZnVuY3Rpb24gKGVsZW0sIHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIpIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICBlbHNlIGlmIChlbGVtLmF0dGFjaEV2ZW50KSBlbGVtLmF0dGFjaEV2ZW50KFwib25cIiArIHR5cGUsIGhhbmRsZXIpO1xuICAgICAgZWxzZSBlbGVtW1wib25cIiArIHR5cGVdID0gaGFuZGxlcjtcbiAgICB9LFxuICAgIG9wdGlvbnMgPSB7XG4gICAgICBhdXRvUnVuOiB0cnVlLFxuICAgICAgYmFyVGhpY2tuZXNzOiAzLFxuICAgICAgYmFyQ29sb3JzOiB7XG4gICAgICAgIDA6IFwicmdiYSgyNiwgIDE4OCwgMTU2LCAuOSlcIixcbiAgICAgICAgXCIuMjVcIjogXCJyZ2JhKDUyLCAgMTUyLCAyMTksIC45KVwiLFxuICAgICAgICBcIi41MFwiOiBcInJnYmEoMjQxLCAxOTYsIDE1LCAgLjkpXCIsXG4gICAgICAgIFwiLjc1XCI6IFwicmdiYSgyMzAsIDEyNiwgMzQsICAuOSlcIixcbiAgICAgICAgXCIxLjBcIjogXCJyZ2JhKDIxMSwgODQsICAwLCAgIC45KVwiLFxuICAgICAgfSxcbiAgICAgIHNoYWRvd0JsdXI6IDEwLFxuICAgICAgc2hhZG93Q29sb3I6IFwicmdiYSgwLCAgIDAsICAgMCwgICAuNilcIixcbiAgICAgIGNsYXNzTmFtZTogbnVsbCxcbiAgICB9LFxuICAgIHJlcGFpbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmJhclRoaWNrbmVzcyAqIDU7IC8vIG5lZWQgc3BhY2UgZm9yIHNoYWRvd1xuXG4gICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGN0eC5zaGFkb3dCbHVyID0gb3B0aW9ucy5zaGFkb3dCbHVyO1xuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gb3B0aW9ucy5zaGFkb3dDb2xvcjtcblxuICAgICAgdmFyIGxpbmVHcmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBjYW52YXMud2lkdGgsIDApO1xuICAgICAgZm9yICh2YXIgc3RvcCBpbiBvcHRpb25zLmJhckNvbG9ycylcbiAgICAgICAgbGluZUdyYWRpZW50LmFkZENvbG9yU3RvcChzdG9wLCBvcHRpb25zLmJhckNvbG9yc1tzdG9wXSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5iYXJUaGlja25lc3M7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKDAsIG9wdGlvbnMuYmFyVGhpY2tuZXNzIC8gMik7XG4gICAgICBjdHgubGluZVRvKFxuICAgICAgICBNYXRoLmNlaWwoY3VycmVudFByb2dyZXNzICogY2FudmFzLndpZHRoKSxcbiAgICAgICAgb3B0aW9ucy5iYXJUaGlja25lc3MgLyAyXG4gICAgICApO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGluZUdyYWRpZW50O1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH0sXG4gICAgY3JlYXRlQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgIHZhciBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcbiAgICAgIHN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgICAgc3R5bGUudG9wID0gc3R5bGUubGVmdCA9IHN0eWxlLnJpZ2h0ID0gc3R5bGUubWFyZ2luID0gc3R5bGUucGFkZGluZyA9IDA7XG4gICAgICBzdHlsZS56SW5kZXggPSAxMDAwMDE7XG4gICAgICBzdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBpZiAob3B0aW9ucy5jbGFzc05hbWUpIGNhbnZhcy5jbGFzc0xpc3QuYWRkKG9wdGlvbnMuY2xhc3NOYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgIGFkZEV2ZW50KHdpbmRvdywgXCJyZXNpemVcIiwgcmVwYWludCk7XG4gICAgfSxcbiAgICB0b3BiYXIgPSB7XG4gICAgICBjb25maWc6IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRzKVxuICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIG9wdGlvbnNba2V5XSA9IG9wdHNba2V5XTtcbiAgICAgIH0sXG4gICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG93aW5nKSByZXR1cm47XG4gICAgICAgIHNob3dpbmcgPSB0cnVlO1xuICAgICAgICBpZiAoZmFkZVRpbWVySWQgIT09IG51bGwpIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShmYWRlVGltZXJJZCk7XG4gICAgICAgIGlmICghY2FudmFzKSBjcmVhdGVDYW52YXMoKTtcbiAgICAgICAgY2FudmFzLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgdG9wYmFyLnByb2dyZXNzKDApO1xuICAgICAgICBpZiAob3B0aW9ucy5hdXRvUnVuKSB7XG4gICAgICAgICAgKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgICAgICBwcm9ncmVzc1RpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICAgICAgdG9wYmFyLnByb2dyZXNzKFxuICAgICAgICAgICAgICBcIitcIiArIDAuMDUgKiBNYXRoLnBvdygxIC0gTWF0aC5zcXJ0KGN1cnJlbnRQcm9ncmVzcyksIDIpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm9ncmVzczogZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBjdXJyZW50UHJvZ3Jlc3M7XG4gICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0byA9XG4gICAgICAgICAgICAodG8uaW5kZXhPZihcIitcIikgPj0gMCB8fCB0by5pbmRleE9mKFwiLVwiKSA+PSAwXG4gICAgICAgICAgICAgID8gY3VycmVudFByb2dyZXNzXG4gICAgICAgICAgICAgIDogMCkgKyBwYXJzZUZsb2F0KHRvKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UHJvZ3Jlc3MgPSB0byA+IDEgPyAxIDogdG87XG4gICAgICAgIHJlcGFpbnQoKTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9ncmVzcztcbiAgICAgIH0sXG4gICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvd2luZykgcmV0dXJuO1xuICAgICAgICBzaG93aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChwcm9ncmVzc1RpbWVySWQgIT0gbnVsbCkge1xuICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShwcm9ncmVzc1RpbWVySWQpO1xuICAgICAgICAgIHByb2dyZXNzVGltZXJJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgICAgaWYgKHRvcGJhci5wcm9ncmVzcyhcIisuMVwiKSA+PSAxKSB7XG4gICAgICAgICAgICBjYW52YXMuc3R5bGUub3BhY2l0eSAtPSAwLjA1O1xuICAgICAgICAgICAgaWYgKGNhbnZhcy5zdHlsZS5vcGFjaXR5IDw9IDAuMDUpIHtcbiAgICAgICAgICAgICAgY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgZmFkZVRpbWVySWQgPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZhZGVUaW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0sXG4gICAgfTtcblxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHRvcGJhcjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdG9wYmFyO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudG9wYmFyID0gdG9wYmFyO1xuICB9XG59LmNhbGwodGhpcywgd2luZG93LCBkb2N1bWVudCkpO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNQTtBQUdBO0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFaQTtBQVZBO0FBeUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBNUNBO0FBOENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdkRBO0FBeURBO0FBQ0E7QUFDQTtBQURBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBcERBO0FBQ0E7QUFzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQSxXQUVBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./vendor/topbar.js\n");

/***/ }),

/***/ 0:
/*!********************************************!*\
  !*** multi ./vendor/topbar.js ./js/app.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./vendor/topbar.js */"./vendor/topbar.js");
module.exports = __webpack_require__(/*! ./js/app.js */"./js/app.js");


/***/ })

/******/ });